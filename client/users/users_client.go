// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserAvatarDelete deletes avatar
*/
func (a *Client) UserAvatarDelete(params *UserAvatarDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UserAvatarDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAvatarDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_avatar_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{user_id}/avatar/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAvatarDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAvatarDeleteNoContent), nil

}

/*
UserAvatarGet retrieves user s avatar
*/
func (a *Client) UserAvatarGet(params *UserAvatarGetParams, authInfo runtime.ClientAuthInfoWriter) (*UserAvatarGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAvatarGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_avatar_get",
		Method:             "GET",
		PathPattern:        "/v1/users/{user_id}/avatar/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAvatarGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAvatarGetOK), nil

}

/*
UserAvatarSet adds user avatar
*/
func (a *Client) UserAvatarSet(params *UserAvatarSetParams, authInfo runtime.ClientAuthInfoWriter) (*UserAvatarSetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAvatarSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_avatar_set",
		Method:             "POST",
		PathPattern:        "/v1/users/{user_id}/avatar/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAvatarSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAvatarSetCreated), nil

}

/*
UserAvatarUpdate updates a project file
*/
func (a *Client) UserAvatarUpdate(params *UserAvatarUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UserAvatarUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserAvatarUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "user_avatar_update",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{user_id}/avatar/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UserAvatarUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserAvatarUpdateOK), nil

}

/*
UsersAPIKeyList retrieves account s API key
*/
func (a *Client) UsersAPIKeyList(params *UsersAPIKeyListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersAPIKeyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersAPIKeyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_api-key_list",
		Method:             "GET",
		PathPattern:        "/v1/users/{user_id}/api-key/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersAPIKeyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersAPIKeyListOK), nil

}

/*
UsersAPIKeyReset resets a user s API key
*/
func (a *Client) UsersAPIKeyReset(params *UsersAPIKeyResetParams, authInfo runtime.ClientAuthInfoWriter) (*UsersAPIKeyResetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersAPIKeyResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_api-key_reset",
		Method:             "POST",
		PathPattern:        "/v1/users/{user_id}/api-key/reset/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersAPIKeyResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersAPIKeyResetCreated), nil

}

/*
UsersCreate creates new user
*/
func (a *Client) UsersCreate(params *UsersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_create",
		Method:             "POST",
		PathPattern:        "/v1/users/profiles/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersCreateCreated), nil

}

/*
UsersDelete deletes a user
*/
func (a *Client) UsersDelete(params *UsersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UsersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/profiles/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersDeleteNoContent), nil

}

/*
UsersEmailsCreate creates an email address
*/
func (a *Client) UsersEmailsCreate(params *UsersEmailsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_create",
		Method:             "POST",
		PathPattern:        "/v1/users/{user_id}/emails/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsCreateCreated), nil

}

/*
UsersEmailsDelete deletes an email address
*/
func (a *Client) UsersEmailsDelete(params *UsersEmailsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/users/{user_id}/emails/{email_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsDeleteNoContent), nil

}

/*
UsersEmailsList retrieves account email addresses
*/
func (a *Client) UsersEmailsList(params *UsersEmailsListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_list",
		Method:             "GET",
		PathPattern:        "/v1/users/{user_id}/emails/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsListOK), nil

}

/*
UsersEmailsRead retrieves a user s email addresses
*/
func (a *Client) UsersEmailsRead(params *UsersEmailsReadParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_read",
		Method:             "GET",
		PathPattern:        "/v1/users/{user_id}/emails/{email_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsReadOK), nil

}

/*
UsersEmailsReplace replaces an email address
*/
func (a *Client) UsersEmailsReplace(params *UsersEmailsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_replace",
		Method:             "PUT",
		PathPattern:        "/v1/users/{user_id}/emails/{email_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsReplaceOK), nil

}

/*
UsersEmailsUpdate updates an email address
*/
func (a *Client) UsersEmailsUpdate(params *UsersEmailsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersEmailsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_update",
		Method:             "PATCH",
		PathPattern:        "/v1/users/{user_id}/emails/{email_id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersEmailsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsUpdateOK), nil

}

/*
UsersList gets user list
*/
func (a *Client) UsersList(params *UsersListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_list",
		Method:             "GET",
		PathPattern:        "/v1/users/profiles/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersListOK), nil

}

/*
UsersRead retrieves a user
*/
func (a *Client) UsersRead(params *UsersReadParams, authInfo runtime.ClientAuthInfoWriter) (*UsersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_read",
		Method:             "GET",
		PathPattern:        "/v1/users/profiles/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersReadOK), nil

}

/*
UsersReplace replaces a user
*/
func (a *Client) UsersReplace(params *UsersReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*UsersReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_replace",
		Method:             "PUT",
		PathPattern:        "/v1/users/profiles/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersReplaceOK), nil

}

/*
UsersSSHKeyList retrieves an SSH key
*/
func (a *Client) UsersSSHKeyList(params *UsersSSHKeyListParams, authInfo runtime.ClientAuthInfoWriter) (*UsersSSHKeyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersSSHKeyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_ssh-key_list",
		Method:             "GET",
		PathPattern:        "/v1/users/{user_id}/ssh-key/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersSSHKeyListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersSSHKeyListOK), nil

}

/*
UsersSSHKeyReset recreates an SSH key
*/
func (a *Client) UsersSSHKeyReset(params *UsersSSHKeyResetParams, authInfo runtime.ClientAuthInfoWriter) (*UsersSSHKeyResetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersSSHKeyResetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_ssh-key_reset",
		Method:             "POST",
		PathPattern:        "/v1/users/{user_id}/ssh-key/reset/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersSSHKeyResetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersSSHKeyResetCreated), nil

}

/*
UsersUpdate updates a user
*/
func (a *Client) UsersUpdate(params *UsersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UsersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_update",
		Method:             "PATCH",
		PathPattern:        "/v1/users/profiles/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
