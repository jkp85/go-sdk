package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UsersAPIKeyList users api key list API
*/
func (a *Client) UsersAPIKeyList(params *UsersAPIKeyListParams) (*UsersAPIKeyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersAPIKeyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_api-key_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/api-key/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersAPIKeyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersAPIKeyListOK), nil

}

/*
UsersAPIKeyResetCreate users api key reset create API
*/
func (a *Client) UsersAPIKeyResetCreate(params *UsersAPIKeyResetCreateParams) (*UsersAPIKeyResetCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersAPIKeyResetCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_api-key_reset_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/api-key/reset/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersAPIKeyResetCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersAPIKeyResetCreateCreated), nil

}

/*
UsersCreate users create API
*/
func (a *Client) UsersCreate(params *UsersCreateParams) (*UsersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersCreateCreated), nil

}

/*
UsersDelete users delete API
*/
func (a *Client) UsersDelete(params *UsersDeleteParams) (*UsersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersDeleteNoContent), nil

}

/*
UsersEmailsCreate users emails create API
*/
func (a *Client) UsersEmailsCreate(params *UsersEmailsCreateParams) (*UsersEmailsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsCreateCreated), nil

}

/*
UsersEmailsDelete users emails delete API
*/
func (a *Client) UsersEmailsDelete(params *UsersEmailsDeleteParams) (*UsersEmailsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsDeleteNoContent), nil

}

/*
UsersEmailsList users emails list API
*/
func (a *Client) UsersEmailsList(params *UsersEmailsListParams) (*UsersEmailsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsListOK), nil

}

/*
UsersEmailsPartialUpdate users emails partial update API
*/
func (a *Client) UsersEmailsPartialUpdate(params *UsersEmailsPartialUpdateParams) (*UsersEmailsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsPartialUpdateOK), nil

}

/*
UsersEmailsRead users emails read API
*/
func (a *Client) UsersEmailsRead(params *UsersEmailsReadParams) (*UsersEmailsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsReadOK), nil

}

/*
UsersEmailsUpdate users emails update API
*/
func (a *Client) UsersEmailsUpdate(params *UsersEmailsUpdateParams) (*UsersEmailsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersEmailsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_emails_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/emails/{address}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersEmailsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersEmailsUpdateOK), nil

}

/*
UsersIntegrationsCreate users integrations create API
*/
func (a *Client) UsersIntegrationsCreate(params *UsersIntegrationsCreateParams) (*UsersIntegrationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsCreateCreated), nil

}

/*
UsersIntegrationsDelete users integrations delete API
*/
func (a *Client) UsersIntegrationsDelete(params *UsersIntegrationsDeleteParams) (*UsersIntegrationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsDeleteNoContent), nil

}

/*
UsersIntegrationsList users integrations list API
*/
func (a *Client) UsersIntegrationsList(params *UsersIntegrationsListParams) (*UsersIntegrationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsListOK), nil

}

/*
UsersIntegrationsPartialUpdate users integrations partial update API
*/
func (a *Client) UsersIntegrationsPartialUpdate(params *UsersIntegrationsPartialUpdateParams) (*UsersIntegrationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsPartialUpdateOK), nil

}

/*
UsersIntegrationsRead users integrations read API
*/
func (a *Client) UsersIntegrationsRead(params *UsersIntegrationsReadParams) (*UsersIntegrationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsReadOK), nil

}

/*
UsersIntegrationsUpdate users integrations update API
*/
func (a *Client) UsersIntegrationsUpdate(params *UsersIntegrationsUpdateParams) (*UsersIntegrationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersIntegrationsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_integrations_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/integrations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersIntegrationsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersIntegrationsUpdateOK), nil

}

/*
UsersList users list API
*/
func (a *Client) UsersList(params *UsersListParams) (*UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersListOK), nil

}

/*
UsersPartialUpdate users partial update API
*/
func (a *Client) UsersPartialUpdate(params *UsersPartialUpdateParams) (*UsersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersPartialUpdateOK), nil

}

/*
UsersRead users read API
*/
func (a *Client) UsersRead(params *UsersReadParams) (*UsersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersReadOK), nil

}

/*
UsersSSHKeyList users ssh key list API
*/
func (a *Client) UsersSSHKeyList(params *UsersSSHKeyListParams) (*UsersSSHKeyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersSSHKeyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_ssh-key_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/ssh-key/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersSSHKeyListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersSSHKeyListOK), nil

}

/*
UsersSSHKeyResetCreate users ssh key reset create API
*/
func (a *Client) UsersSSHKeyResetCreate(params *UsersSSHKeyResetCreateParams) (*UsersSSHKeyResetCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersSSHKeyResetCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_ssh-key_reset_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/users/{user_pk}/ssh-key/reset/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersSSHKeyResetCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersSSHKeyResetCreateCreated), nil

}

/*
UsersUpdate users update API
*/
func (a *Client) UsersUpdate(params *UsersUpdateParams) (*UsersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "users_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/users/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UsersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UsersUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
