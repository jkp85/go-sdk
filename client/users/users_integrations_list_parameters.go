package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsersIntegrationsListParams creates a new UsersIntegrationsListParams object
// with the default values initialized.
func NewUsersIntegrationsListParams() *UsersIntegrationsListParams {
	var ()
	return &UsersIntegrationsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersIntegrationsListParamsWithTimeout creates a new UsersIntegrationsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersIntegrationsListParamsWithTimeout(timeout time.Duration) *UsersIntegrationsListParams {
	var ()
	return &UsersIntegrationsListParams{

		timeout: timeout,
	}
}

// NewUsersIntegrationsListParamsWithContext creates a new UsersIntegrationsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersIntegrationsListParamsWithContext(ctx context.Context) *UsersIntegrationsListParams {
	var ()
	return &UsersIntegrationsListParams{

		Context: ctx,
	}
}

// NewUsersIntegrationsListParamsWithHTTPClient creates a new UsersIntegrationsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersIntegrationsListParamsWithHTTPClient(client *http.Client) *UsersIntegrationsListParams {
	var ()
	return &UsersIntegrationsListParams{
		HTTPClient: client,
	}
}

/*UsersIntegrationsListParams contains all the parameters to send to the API endpoint
for the users integrations list operation typically these are written to a http.Request
*/
type UsersIntegrationsListParams struct {

	/*Limit*/
	Limit *string
	/*Namespace*/
	Namespace string
	/*Offset*/
	Offset *string
	/*UserPk*/
	UserPk string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users integrations list params
func (o *UsersIntegrationsListParams) WithTimeout(timeout time.Duration) *UsersIntegrationsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users integrations list params
func (o *UsersIntegrationsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users integrations list params
func (o *UsersIntegrationsListParams) WithContext(ctx context.Context) *UsersIntegrationsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users integrations list params
func (o *UsersIntegrationsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users integrations list params
func (o *UsersIntegrationsListParams) WithHTTPClient(client *http.Client) *UsersIntegrationsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users integrations list params
func (o *UsersIntegrationsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the users integrations list params
func (o *UsersIntegrationsListParams) WithLimit(limit *string) *UsersIntegrationsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the users integrations list params
func (o *UsersIntegrationsListParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the users integrations list params
func (o *UsersIntegrationsListParams) WithNamespace(namespace string) *UsersIntegrationsListParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the users integrations list params
func (o *UsersIntegrationsListParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOffset adds the offset to the users integrations list params
func (o *UsersIntegrationsListParams) WithOffset(offset *string) *UsersIntegrationsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the users integrations list params
func (o *UsersIntegrationsListParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithUserPk adds the userPk to the users integrations list params
func (o *UsersIntegrationsListParams) WithUserPk(userPk string) *UsersIntegrationsListParams {
	o.SetUserPk(userPk)
	return o
}

// SetUserPk adds the userPk to the users integrations list params
func (o *UsersIntegrationsListParams) SetUserPk(userPk string) {
	o.UserPk = userPk
}

// WriteToRequest writes these params to a swagger request
func (o *UsersIntegrationsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// path param user_pk
	if err := r.SetPathParam("user_pk", o.UserPk); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
