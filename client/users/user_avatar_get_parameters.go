// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserAvatarGetParams creates a new UserAvatarGetParams object
// with the default values initialized.
func NewUserAvatarGetParams() *UserAvatarGetParams {
	var ()
	return &UserAvatarGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserAvatarGetParamsWithTimeout creates a new UserAvatarGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserAvatarGetParamsWithTimeout(timeout time.Duration) *UserAvatarGetParams {
	var ()
	return &UserAvatarGetParams{

		timeout: timeout,
	}
}

// NewUserAvatarGetParamsWithContext creates a new UserAvatarGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserAvatarGetParamsWithContext(ctx context.Context) *UserAvatarGetParams {
	var ()
	return &UserAvatarGetParams{

		Context: ctx,
	}
}

// NewUserAvatarGetParamsWithHTTPClient creates a new UserAvatarGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserAvatarGetParamsWithHTTPClient(client *http.Client) *UserAvatarGetParams {
	var ()
	return &UserAvatarGetParams{
		HTTPClient: client,
	}
}

/*UserAvatarGetParams contains all the parameters to send to the API endpoint
for the user avatar get operation typically these are written to a http.Request
*/
type UserAvatarGetParams struct {

	/*User
	  User unique identifier expressed as UUIDor username.

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user avatar get params
func (o *UserAvatarGetParams) WithTimeout(timeout time.Duration) *UserAvatarGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user avatar get params
func (o *UserAvatarGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user avatar get params
func (o *UserAvatarGetParams) WithContext(ctx context.Context) *UserAvatarGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user avatar get params
func (o *UserAvatarGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user avatar get params
func (o *UserAvatarGetParams) WithHTTPClient(client *http.Client) *UserAvatarGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user avatar get params
func (o *UserAvatarGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the user avatar get params
func (o *UserAvatarGetParams) WithUser(user string) *UserAvatarGetParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the user avatar get params
func (o *UserAvatarGetParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *UserAvatarGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
