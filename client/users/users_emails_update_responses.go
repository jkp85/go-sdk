package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// UsersEmailsUpdateReader is a Reader for the UsersEmailsUpdate structure.
type UsersEmailsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UsersEmailsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUsersEmailsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUsersEmailsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUsersEmailsUpdateOK creates a UsersEmailsUpdateOK with default headers values
func NewUsersEmailsUpdateOK() *UsersEmailsUpdateOK {
	return &UsersEmailsUpdateOK{}
}

/*UsersEmailsUpdateOK handles this case with default header values.

Email updated
*/
type UsersEmailsUpdateOK struct {
	Payload *models.Email
}

func (o *UsersEmailsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /users/emails/{id}/][%d] usersEmailsUpdateOK  %+v", 200, o.Payload)
}

func (o *UsersEmailsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Email)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUsersEmailsUpdateBadRequest creates a UsersEmailsUpdateBadRequest with default headers values
func NewUsersEmailsUpdateBadRequest() *UsersEmailsUpdateBadRequest {
	return &UsersEmailsUpdateBadRequest{}
}

/*UsersEmailsUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type UsersEmailsUpdateBadRequest struct {
	Payload UsersEmailsUpdateBadRequestBody
}

func (o *UsersEmailsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/emails/{id}/][%d] usersEmailsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *UsersEmailsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UsersEmailsUpdateBadRequestBody users emails update bad request body
swagger:model UsersEmailsUpdateBadRequestBody
*/
type UsersEmailsUpdateBadRequestBody struct {

	// address field errors
	// Required: true
	Address []string `json:"address"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// public field errors
	// Required: true
	Public []string `json:"public"`

	// unsubscribed field errors
	// Required: true
	Unsubscribed []string `json:"unsubscribed"`
}

// Validate validates this users emails update bad request body
func (o *UsersEmailsUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePublic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateUnsubscribed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UsersEmailsUpdateBadRequestBody) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("usersEmailsUpdateBadRequest"+"."+"address", "body", o.Address); err != nil {
		return err
	}

	return nil
}

func (o *UsersEmailsUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("usersEmailsUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *UsersEmailsUpdateBadRequestBody) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("usersEmailsUpdateBadRequest"+"."+"public", "body", o.Public); err != nil {
		return err
	}

	return nil
}

func (o *UsersEmailsUpdateBadRequestBody) validateUnsubscribed(formats strfmt.Registry) error {

	if err := validate.Required("usersEmailsUpdateBadRequest"+"."+"unsubscribed", "body", o.Unsubscribed); err != nil {
		return err
	}

	return nil
}

/*UsersEmailsUpdateBody users emails update body
swagger:model UsersEmailsUpdateBody
*/
type UsersEmailsUpdateBody struct {

	// address
	// Required: true
	Address *string `json:"address"`

	// public
	Public bool `json:"public,omitempty"`

	// unsubscribed
	Unsubscribed bool `json:"unsubscribed,omitempty"`
}
