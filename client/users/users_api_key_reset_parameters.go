// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsersAPIKeyResetParams creates a new UsersAPIKeyResetParams object
// with the default values initialized.
func NewUsersAPIKeyResetParams() *UsersAPIKeyResetParams {
	var ()
	return &UsersAPIKeyResetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersAPIKeyResetParamsWithTimeout creates a new UsersAPIKeyResetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersAPIKeyResetParamsWithTimeout(timeout time.Duration) *UsersAPIKeyResetParams {
	var ()
	return &UsersAPIKeyResetParams{

		timeout: timeout,
	}
}

// NewUsersAPIKeyResetParamsWithContext creates a new UsersAPIKeyResetParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersAPIKeyResetParamsWithContext(ctx context.Context) *UsersAPIKeyResetParams {
	var ()
	return &UsersAPIKeyResetParams{

		Context: ctx,
	}
}

// NewUsersAPIKeyResetParamsWithHTTPClient creates a new UsersAPIKeyResetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersAPIKeyResetParamsWithHTTPClient(client *http.Client) *UsersAPIKeyResetParams {
	var ()
	return &UsersAPIKeyResetParams{
		HTTPClient: client,
	}
}

/*UsersAPIKeyResetParams contains all the parameters to send to the API endpoint
for the users api key reset operation typically these are written to a http.Request
*/
type UsersAPIKeyResetParams struct {

	/*User
	  User unique identifier expressed as UUID or username.

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users api key reset params
func (o *UsersAPIKeyResetParams) WithTimeout(timeout time.Duration) *UsersAPIKeyResetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users api key reset params
func (o *UsersAPIKeyResetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users api key reset params
func (o *UsersAPIKeyResetParams) WithContext(ctx context.Context) *UsersAPIKeyResetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users api key reset params
func (o *UsersAPIKeyResetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users api key reset params
func (o *UsersAPIKeyResetParams) WithHTTPClient(client *http.Client) *UsersAPIKeyResetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users api key reset params
func (o *UsersAPIKeyResetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the users api key reset params
func (o *UsersAPIKeyResetParams) WithUser(user string) *UsersAPIKeyResetParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the users api key reset params
func (o *UsersAPIKeyResetParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *UsersAPIKeyResetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
