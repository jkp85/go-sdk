// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// NewUsersIntegrationsUpdateParams creates a new UsersIntegrationsUpdateParams object
// with the default values initialized.
func NewUsersIntegrationsUpdateParams() *UsersIntegrationsUpdateParams {
	var ()
	return &UsersIntegrationsUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersIntegrationsUpdateParamsWithTimeout creates a new UsersIntegrationsUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersIntegrationsUpdateParamsWithTimeout(timeout time.Duration) *UsersIntegrationsUpdateParams {
	var ()
	return &UsersIntegrationsUpdateParams{

		timeout: timeout,
	}
}

// NewUsersIntegrationsUpdateParamsWithContext creates a new UsersIntegrationsUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersIntegrationsUpdateParamsWithContext(ctx context.Context) *UsersIntegrationsUpdateParams {
	var ()
	return &UsersIntegrationsUpdateParams{

		Context: ctx,
	}
}

// NewUsersIntegrationsUpdateParamsWithHTTPClient creates a new UsersIntegrationsUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersIntegrationsUpdateParamsWithHTTPClient(client *http.Client) *UsersIntegrationsUpdateParams {
	var ()
	return &UsersIntegrationsUpdateParams{
		HTTPClient: client,
	}
}

/*UsersIntegrationsUpdateParams contains all the parameters to send to the API endpoint
for the users integrations update operation typically these are written to a http.Request
*/
type UsersIntegrationsUpdateParams struct {

	/*Data*/
	Data *models.IntegrationData
	/*ID
	  Integration unique identifier expressed as UUID.

	*/
	ID string
	/*UserID
	  User unique identifier expressed as UUID.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithTimeout(timeout time.Duration) *UsersIntegrationsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithContext(ctx context.Context) *UsersIntegrationsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithHTTPClient(client *http.Client) *UsersIntegrationsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithData(data *models.IntegrationData) *UsersIntegrationsUpdateParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetData(data *models.IntegrationData) {
	o.Data = data
}

// WithID adds the id to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithID(id string) *UsersIntegrationsUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetID(id string) {
	o.ID = id
}

// WithUserID adds the userID to the users integrations update params
func (o *UsersIntegrationsUpdateParams) WithUserID(userID string) *UsersIntegrationsUpdateParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the users integrations update params
func (o *UsersIntegrationsUpdateParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UsersIntegrationsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Data == nil {
		o.Data = new(models.IntegrationData)
	}

	if err := r.SetBodyParam(o.Data); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param user_id
	if err := r.SetPathParam("user_id", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
