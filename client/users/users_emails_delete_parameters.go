package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsersEmailsDeleteParams creates a new UsersEmailsDeleteParams object
// with the default values initialized.
func NewUsersEmailsDeleteParams() *UsersEmailsDeleteParams {
	var ()
	return &UsersEmailsDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersEmailsDeleteParamsWithTimeout creates a new UsersEmailsDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersEmailsDeleteParamsWithTimeout(timeout time.Duration) *UsersEmailsDeleteParams {
	var ()
	return &UsersEmailsDeleteParams{

		timeout: timeout,
	}
}

// NewUsersEmailsDeleteParamsWithContext creates a new UsersEmailsDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersEmailsDeleteParamsWithContext(ctx context.Context) *UsersEmailsDeleteParams {
	var ()
	return &UsersEmailsDeleteParams{

		Context: ctx,
	}
}

// NewUsersEmailsDeleteParamsWithHTTPClient creates a new UsersEmailsDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersEmailsDeleteParamsWithHTTPClient(client *http.Client) *UsersEmailsDeleteParams {
	var ()
	return &UsersEmailsDeleteParams{
		HTTPClient: client,
	}
}

/*UsersEmailsDeleteParams contains all the parameters to send to the API endpoint
for the users emails delete operation typically these are written to a http.Request
*/
type UsersEmailsDeleteParams struct {

	/*Address*/
	Address string
	/*UserPk*/
	UserPk string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users emails delete params
func (o *UsersEmailsDeleteParams) WithTimeout(timeout time.Duration) *UsersEmailsDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users emails delete params
func (o *UsersEmailsDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users emails delete params
func (o *UsersEmailsDeleteParams) WithContext(ctx context.Context) *UsersEmailsDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users emails delete params
func (o *UsersEmailsDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users emails delete params
func (o *UsersEmailsDeleteParams) WithHTTPClient(client *http.Client) *UsersEmailsDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users emails delete params
func (o *UsersEmailsDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the users emails delete params
func (o *UsersEmailsDeleteParams) WithAddress(address string) *UsersEmailsDeleteParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the users emails delete params
func (o *UsersEmailsDeleteParams) SetAddress(address string) {
	o.Address = address
}

// WithUserPk adds the userPk to the users emails delete params
func (o *UsersEmailsDeleteParams) WithUserPk(userPk string) *UsersEmailsDeleteParams {
	o.SetUserPk(userPk)
	return o
}

// SetUserPk adds the userPk to the users emails delete params
func (o *UsersEmailsDeleteParams) SetUserPk(userPk string) {
	o.UserPk = userPk
}

// WriteToRequest writes these params to a swagger request
func (o *UsersEmailsDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	// path param user_pk
	if err := r.SetPathParam("user_pk", o.UserPk); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
