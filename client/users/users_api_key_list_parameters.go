package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsersAPIKeyListParams creates a new UsersAPIKeyListParams object
// with the default values initialized.
func NewUsersAPIKeyListParams() *UsersAPIKeyListParams {
	var ()
	return &UsersAPIKeyListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersAPIKeyListParamsWithTimeout creates a new UsersAPIKeyListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersAPIKeyListParamsWithTimeout(timeout time.Duration) *UsersAPIKeyListParams {
	var ()
	return &UsersAPIKeyListParams{

		timeout: timeout,
	}
}

// NewUsersAPIKeyListParamsWithContext creates a new UsersAPIKeyListParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersAPIKeyListParamsWithContext(ctx context.Context) *UsersAPIKeyListParams {
	var ()
	return &UsersAPIKeyListParams{

		Context: ctx,
	}
}

// NewUsersAPIKeyListParamsWithHTTPClient creates a new UsersAPIKeyListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersAPIKeyListParamsWithHTTPClient(client *http.Client) *UsersAPIKeyListParams {
	var ()
	return &UsersAPIKeyListParams{
		HTTPClient: client,
	}
}

/*UsersAPIKeyListParams contains all the parameters to send to the API endpoint
for the users api key list operation typically these are written to a http.Request
*/
type UsersAPIKeyListParams struct {

	/*UserPk*/
	UserPk string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users api key list params
func (o *UsersAPIKeyListParams) WithTimeout(timeout time.Duration) *UsersAPIKeyListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users api key list params
func (o *UsersAPIKeyListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users api key list params
func (o *UsersAPIKeyListParams) WithContext(ctx context.Context) *UsersAPIKeyListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users api key list params
func (o *UsersAPIKeyListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users api key list params
func (o *UsersAPIKeyListParams) WithHTTPClient(client *http.Client) *UsersAPIKeyListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users api key list params
func (o *UsersAPIKeyListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserPk adds the userPk to the users api key list params
func (o *UsersAPIKeyListParams) WithUserPk(userPk string) *UsersAPIKeyListParams {
	o.SetUserPk(userPk)
	return o
}

// SetUserPk adds the userPk to the users api key list params
func (o *UsersAPIKeyListParams) SetUserPk(userPk string) {
	o.UserPk = userPk
}

// WriteToRequest writes these params to a swagger request
func (o *UsersAPIKeyListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param user_pk
	if err := r.SetPathParam("user_pk", o.UserPk); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
