// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// NewUsersEmailsReplaceParams creates a new UsersEmailsReplaceParams object
// with the default values initialized.
func NewUsersEmailsReplaceParams() *UsersEmailsReplaceParams {
	var ()
	return &UsersEmailsReplaceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsersEmailsReplaceParamsWithTimeout creates a new UsersEmailsReplaceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsersEmailsReplaceParamsWithTimeout(timeout time.Duration) *UsersEmailsReplaceParams {
	var ()
	return &UsersEmailsReplaceParams{

		timeout: timeout,
	}
}

// NewUsersEmailsReplaceParamsWithContext creates a new UsersEmailsReplaceParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsersEmailsReplaceParamsWithContext(ctx context.Context) *UsersEmailsReplaceParams {
	var ()
	return &UsersEmailsReplaceParams{

		Context: ctx,
	}
}

// NewUsersEmailsReplaceParamsWithHTTPClient creates a new UsersEmailsReplaceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsersEmailsReplaceParamsWithHTTPClient(client *http.Client) *UsersEmailsReplaceParams {
	var ()
	return &UsersEmailsReplaceParams{
		HTTPClient: client,
	}
}

/*UsersEmailsReplaceParams contains all the parameters to send to the API endpoint
for the users emails replace operation typically these are written to a http.Request
*/
type UsersEmailsReplaceParams struct {

	/*EmailData*/
	EmailData *models.EmailData
	/*EmailID
	  Email unique identifier expressed as UUID.

	*/
	EmailID string
	/*UserID
	  User unique identifier expressed as UUID.

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the users emails replace params
func (o *UsersEmailsReplaceParams) WithTimeout(timeout time.Duration) *UsersEmailsReplaceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the users emails replace params
func (o *UsersEmailsReplaceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the users emails replace params
func (o *UsersEmailsReplaceParams) WithContext(ctx context.Context) *UsersEmailsReplaceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the users emails replace params
func (o *UsersEmailsReplaceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the users emails replace params
func (o *UsersEmailsReplaceParams) WithHTTPClient(client *http.Client) *UsersEmailsReplaceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the users emails replace params
func (o *UsersEmailsReplaceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEmailData adds the emailData to the users emails replace params
func (o *UsersEmailsReplaceParams) WithEmailData(emailData *models.EmailData) *UsersEmailsReplaceParams {
	o.SetEmailData(emailData)
	return o
}

// SetEmailData adds the emailData to the users emails replace params
func (o *UsersEmailsReplaceParams) SetEmailData(emailData *models.EmailData) {
	o.EmailData = emailData
}

// WithEmailID adds the emailID to the users emails replace params
func (o *UsersEmailsReplaceParams) WithEmailID(emailID string) *UsersEmailsReplaceParams {
	o.SetEmailID(emailID)
	return o
}

// SetEmailID adds the emailId to the users emails replace params
func (o *UsersEmailsReplaceParams) SetEmailID(emailID string) {
	o.EmailID = emailID
}

// WithUserID adds the userID to the users emails replace params
func (o *UsersEmailsReplaceParams) WithUserID(userID string) *UsersEmailsReplaceParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the users emails replace params
func (o *UsersEmailsReplaceParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UsersEmailsReplaceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EmailData == nil {
		o.EmailData = new(models.EmailData)
	}

	if err := r.SetBodyParam(o.EmailData); err != nil {
		return err
	}

	// path param email_id
	if err := r.SetPathParam("email_id", o.EmailID); err != nil {
		return err
	}

	// path param user_id
	if err := r.SetPathParam("user_id", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
