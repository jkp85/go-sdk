// Code generated by go-swagger; DO NOT EDIT.

package actions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewActionsListParams creates a new ActionsListParams object
// with the default values initialized.
func NewActionsListParams() *ActionsListParams {
	var ()
	return &ActionsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewActionsListParamsWithTimeout creates a new ActionsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewActionsListParamsWithTimeout(timeout time.Duration) *ActionsListParams {
	var ()
	return &ActionsListParams{

		timeout: timeout,
	}
}

// NewActionsListParamsWithContext creates a new ActionsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewActionsListParamsWithContext(ctx context.Context) *ActionsListParams {
	var ()
	return &ActionsListParams{

		Context: ctx,
	}
}

// NewActionsListParamsWithHTTPClient creates a new ActionsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewActionsListParamsWithHTTPClient(client *http.Client) *ActionsListParams {
	var ()
	return &ActionsListParams{
		HTTPClient: client,
	}
}

/*ActionsListParams contains all the parameters to send to the API endpoint
for the actions list operation typically these are written to a http.Request
*/
type ActionsListParams struct {

	/*EndDate
	  End date and time when retrieving actions.

	*/
	EndDate *string
	/*Limit
	  Limit actions.

	*/
	Limit *string
	/*Offset
	  Offest items when retrieving actions.

	*/
	Offset *string
	/*Ordering
	  Oder items when retrieving actions.

	*/
	Ordering *string
	/*StartDate
	  Start date and time when retrieving actions.

	*/
	StartDate *string
	/*State
	  Set state when retrieving actions.

	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the actions list params
func (o *ActionsListParams) WithTimeout(timeout time.Duration) *ActionsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the actions list params
func (o *ActionsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the actions list params
func (o *ActionsListParams) WithContext(ctx context.Context) *ActionsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the actions list params
func (o *ActionsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the actions list params
func (o *ActionsListParams) WithHTTPClient(client *http.Client) *ActionsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the actions list params
func (o *ActionsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the actions list params
func (o *ActionsListParams) WithEndDate(endDate *string) *ActionsListParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the actions list params
func (o *ActionsListParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the actions list params
func (o *ActionsListParams) WithLimit(limit *string) *ActionsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the actions list params
func (o *ActionsListParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithOffset adds the offset to the actions list params
func (o *ActionsListParams) WithOffset(offset *string) *ActionsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the actions list params
func (o *ActionsListParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the actions list params
func (o *ActionsListParams) WithOrdering(ordering *string) *ActionsListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the actions list params
func (o *ActionsListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithStartDate adds the startDate to the actions list params
func (o *ActionsListParams) WithStartDate(startDate *string) *ActionsListParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the actions list params
func (o *ActionsListParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WithState adds the state to the actions list params
func (o *ActionsListParams) WithState(state *string) *ActionsListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the actions list params
func (o *ActionsListParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *ActionsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param end_date
		var qrEndDate string
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {
			if err := r.SetQueryParam("end_date", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param start_date
		var qrStartDate string
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {
			if err := r.SetQueryParam("start_date", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
