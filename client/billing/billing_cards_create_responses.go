package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// BillingCardsCreateReader is a Reader for the BillingCardsCreate structure.
type BillingCardsCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BillingCardsCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewBillingCardsCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBillingCardsCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBillingCardsCreateCreated creates a BillingCardsCreateCreated with default headers values
func NewBillingCardsCreateCreated() *BillingCardsCreateCreated {
	return &BillingCardsCreateCreated{}
}

/*BillingCardsCreateCreated handles this case with default header values.

Card created
*/
type BillingCardsCreateCreated struct {
	Payload *models.Card
}

func (o *BillingCardsCreateCreated) Error() string {
	return fmt.Sprintf("[POST /{namespace}/billing/cards/][%d] billingCardsCreateCreated  %+v", 201, o.Payload)
}

func (o *BillingCardsCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Card)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingCardsCreateBadRequest creates a BillingCardsCreateBadRequest with default headers values
func NewBillingCardsCreateBadRequest() *BillingCardsCreateBadRequest {
	return &BillingCardsCreateBadRequest{}
}

/*BillingCardsCreateBadRequest handles this case with default header values.

Invalid data supplied
*/
type BillingCardsCreateBadRequest struct {
	Payload BillingCardsCreateBadRequestBody
}

func (o *BillingCardsCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /{namespace}/billing/cards/][%d] billingCardsCreateBadRequest  %+v", 400, o.Payload)
}

func (o *BillingCardsCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BillingCardsCreateBadRequestBody billing cards create bad request body
swagger:model BillingCardsCreateBadRequestBody
*/
type BillingCardsCreateBadRequestBody struct {

	// address_city field errors
	// Required: true
	AddressCity []string `json:"address_city"`

	// address_country field errors
	// Required: true
	AddressCountry []string `json:"address_country"`

	// address_line1 field errors
	// Required: true
	AddressLine1 []string `json:"address_line1"`

	// address_line1_check field errors
	// Required: true
	AddressLine1Check []string `json:"address_line1_check"`

	// address_line2 field errors
	// Required: true
	AddressLine2 []string `json:"address_line2"`

	// address_state field errors
	// Required: true
	AddressState []string `json:"address_state"`

	// address_zip field errors
	// Required: true
	AddressZip []string `json:"address_zip"`

	// address_zip_check field errors
	// Required: true
	AddressZipCheck []string `json:"address_zip_check"`

	// brand field errors
	// Required: true
	Brand []string `json:"brand"`

	// created field errors
	// Required: true
	Created []string `json:"created"`

	// customer field errors
	// Required: true
	Customer []string `json:"customer"`

	// cvc_check field errors
	// Required: true
	CvcCheck []string `json:"cvc_check"`

	// exp_month field errors
	// Required: true
	ExpMonth []string `json:"exp_month"`

	// exp_year field errors
	// Required: true
	ExpYear []string `json:"exp_year"`

	// fingerprint field errors
	// Required: true
	Fingerprint []string `json:"fingerprint"`

	// funding field errors
	// Required: true
	Funding []string `json:"funding"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// last4 field errors
	// Required: true
	Last4 []string `json:"last4"`

	// name field errors
	// Required: true
	Name []string `json:"name"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// stripe_id field errors
	// Required: true
	StripeID []string `json:"stripe_id"`

	// token field errors
	// Required: true
	Token []string `json:"token"`
}

// Validate validates this billing cards create bad request body
func (o *BillingCardsCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddressCity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressCountry(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressLine1(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressLine1Check(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressLine2(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressZip(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateAddressZipCheck(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateBrand(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCustomer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCvcCheck(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateExpMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateExpYear(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateFingerprint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateFunding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateLast4(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStripeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressCity(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_city", "body", o.AddressCity); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressCountry(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_country", "body", o.AddressCountry); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_line1", "body", o.AddressLine1); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressLine1Check(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_line1_check", "body", o.AddressLine1Check); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressLine2(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_line2", "body", o.AddressLine2); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressState(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_state", "body", o.AddressState); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressZip(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_zip", "body", o.AddressZip); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateAddressZipCheck(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"address_zip_check", "body", o.AddressZipCheck); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateBrand(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"brand", "body", o.Brand); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"created", "body", o.Created); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateCustomer(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"customer", "body", o.Customer); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateCvcCheck(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"cvc_check", "body", o.CvcCheck); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateExpMonth(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"exp_month", "body", o.ExpMonth); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateExpYear(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"exp_year", "body", o.ExpYear); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"fingerprint", "body", o.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateFunding(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"funding", "body", o.Funding); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateLast4(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"last4", "body", o.Last4); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateStripeID(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"stripe_id", "body", o.StripeID); err != nil {
		return err
	}

	return nil
}

func (o *BillingCardsCreateBadRequestBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("billingCardsCreateBadRequest"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

/*BillingCardsCreateBody billing cards create body
swagger:model BillingCardsCreateBody
*/
type BillingCardsCreateBody struct {

	// address city
	AddressCity string `json:"address_city,omitempty"`

	// address country
	AddressCountry string `json:"address_country,omitempty"`

	// address line1
	AddressLine1 string `json:"address_line1,omitempty"`

	// address line2
	AddressLine2 string `json:"address_line2,omitempty"`

	// address state
	AddressState string `json:"address_state,omitempty"`

	// address zip
	AddressZip string `json:"address_zip,omitempty"`

	// exp month
	ExpMonth int64 `json:"exp_month,omitempty"`

	// exp year
	ExpYear int64 `json:"exp_year,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}
