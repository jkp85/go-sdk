// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new billing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BillingCardsCreate creates new credit card
*/
func (a *Client) BillingCardsCreate(params *BillingCardsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/billing/cards/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsCreateCreated), nil

}

/*
BillingCardsDelete deletes a credit card
*/
func (a *Client) BillingCardsDelete(params *BillingCardsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsDeleteNoContent), nil

}

/*
BillingCardsList gets credit cards
*/
func (a *Client) BillingCardsList(params *BillingCardsListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/cards/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsListOK), nil

}

/*
BillingCardsRead gets credit card by id
*/
func (a *Client) BillingCardsRead(params *BillingCardsReadParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsReadOK), nil

}

/*
BillingCardsReplace replaces a credit card
*/
func (a *Client) BillingCardsReplace(params *BillingCardsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsReplaceOK), nil

}

/*
BillingCardsUpdate updates a credit card
*/
func (a *Client) BillingCardsUpdate(params *BillingCardsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCardsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCardsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsUpdateOK), nil

}

/*
BillingCustomersCreate creates new customer
*/
func (a *Client) BillingCustomersCreate(params *BillingCustomersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/billing/customers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersCreateCreated), nil

}

/*
BillingCustomersDelete deletes a customer
*/
func (a *Client) BillingCustomersDelete(params *BillingCustomersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersDeleteNoContent), nil

}

/*
BillingCustomersList gets customers
*/
func (a *Client) BillingCustomersList(params *BillingCustomersListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/customers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersListOK), nil

}

/*
BillingCustomersRead gets a customer
*/
func (a *Client) BillingCustomersRead(params *BillingCustomersReadParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersReadOK), nil

}

/*
BillingCustomersReplace replaces a customer
*/
func (a *Client) BillingCustomersReplace(params *BillingCustomersReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersReplaceOK), nil

}

/*
BillingCustomersUpdate updates a customer
*/
func (a *Client) BillingCustomersUpdate(params *BillingCustomersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingCustomersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingCustomersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersUpdateOK), nil

}

/*
BillingInvoicesList gets invoices
*/
func (a *Client) BillingInvoicesList(params *BillingInvoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingInvoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingInvoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_invoices_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/invoices/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingInvoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingInvoicesListOK), nil

}

/*
BillingInvoicesRead gets an invoice
*/
func (a *Client) BillingInvoicesRead(params *BillingInvoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*BillingInvoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingInvoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_invoices_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/invoices/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingInvoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingInvoicesReadOK), nil

}

/*
BillingPlansCreate creates a billing plan
*/
func (a *Client) BillingPlansCreate(params *BillingPlansCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/billing/plans/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansCreateCreated), nil

}

/*
BillingPlansDelete deletes a billing plan
*/
func (a *Client) BillingPlansDelete(params *BillingPlansDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansDeleteNoContent), nil

}

/*
BillingPlansList gets billing plans
*/
func (a *Client) BillingPlansList(params *BillingPlansListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/plans/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansListOK), nil

}

/*
BillingPlansRead gets a billing plan
*/
func (a *Client) BillingPlansRead(params *BillingPlansReadParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansReadOK), nil

}

/*
BillingPlansReplace replaces a billing plan
*/
func (a *Client) BillingPlansReplace(params *BillingPlansReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansReplaceOK), nil

}

/*
BillingPlansUpdate updates a billing plan
*/
func (a *Client) BillingPlansUpdate(params *BillingPlansUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingPlansUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingPlansUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansUpdateOK), nil

}

/*
BillingSubscriptionRequiredCreate requires subscription for an account
*/
func (a *Client) BillingSubscriptionRequiredCreate(params *BillingSubscriptionRequiredCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionRequiredCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionRequiredCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscription_required_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/billing/subscription_required/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionRequiredCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionRequiredCreateCreated), nil

}

/*
BillingSubscriptionRequiredList gets subscription required
*/
func (a *Client) BillingSubscriptionRequiredList(params *BillingSubscriptionRequiredListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionRequiredListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionRequiredListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscription_required_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/subscription_required/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionRequiredListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionRequiredListOK), nil

}

/*
BillingSubscriptionsCreate creates a new subscription
*/
func (a *Client) BillingSubscriptionsCreate(params *BillingSubscriptionsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsCreateCreated), nil

}

/*
BillingSubscriptionsDelete deletes a subscription
*/
func (a *Client) BillingSubscriptionsDelete(params *BillingSubscriptionsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsDeleteNoContent), nil

}

/*
BillingSubscriptionsList gets valid subscriptons
*/
func (a *Client) BillingSubscriptionsList(params *BillingSubscriptionsListParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsListOK), nil

}

/*
BillingSubscriptionsRead gets a subscriptions
*/
func (a *Client) BillingSubscriptionsRead(params *BillingSubscriptionsReadParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsReadOK), nil

}

/*
BillingSubscriptionsReplace replaces a subscription
*/
func (a *Client) BillingSubscriptionsReplace(params *BillingSubscriptionsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsReplaceOK), nil

}

/*
BillingSubscriptionsUpdate updates a subscription
*/
func (a *Client) BillingSubscriptionsUpdate(params *BillingSubscriptionsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*BillingSubscriptionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingSubscriptionsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
