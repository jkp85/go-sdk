package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new billing API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for billing API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BillingCardsCreate billing cards create API
*/
func (a *Client) BillingCardsCreate(params *BillingCardsCreateParams) (*BillingCardsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/billing/cards/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsCreateCreated), nil

}

/*
BillingCardsDelete billing cards delete API
*/
func (a *Client) BillingCardsDelete(params *BillingCardsDeleteParams) (*BillingCardsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_delete",
		Method:             "DELETE",
		PathPattern:        "/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsDeleteNoContent), nil

}

/*
BillingCardsList billing cards list API
*/
func (a *Client) BillingCardsList(params *BillingCardsListParams) (*BillingCardsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/cards/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsListOK), nil

}

/*
BillingCardsPartialUpdate billing cards partial update API
*/
func (a *Client) BillingCardsPartialUpdate(params *BillingCardsPartialUpdateParams) (*BillingCardsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_partial_update",
		Method:             "PATCH",
		PathPattern:        "/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsPartialUpdateOK), nil

}

/*
BillingCardsRead billing cards read API
*/
func (a *Client) BillingCardsRead(params *BillingCardsReadParams) (*BillingCardsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsReadOK), nil

}

/*
BillingCardsUpdate billing cards update API
*/
func (a *Client) BillingCardsUpdate(params *BillingCardsUpdateParams) (*BillingCardsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCardsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_cards_update",
		Method:             "PUT",
		PathPattern:        "/{namespace}/billing/cards/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCardsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCardsUpdateOK), nil

}

/*
BillingCustomersCreate billing customers create API
*/
func (a *Client) BillingCustomersCreate(params *BillingCustomersCreateParams) (*BillingCustomersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/billing/customers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersCreateCreated), nil

}

/*
BillingCustomersDelete billing customers delete API
*/
func (a *Client) BillingCustomersDelete(params *BillingCustomersDeleteParams) (*BillingCustomersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_delete",
		Method:             "DELETE",
		PathPattern:        "/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersDeleteNoContent), nil

}

/*
BillingCustomersList billing customers list API
*/
func (a *Client) BillingCustomersList(params *BillingCustomersListParams) (*BillingCustomersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/customers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersListOK), nil

}

/*
BillingCustomersPartialUpdate billing customers partial update API
*/
func (a *Client) BillingCustomersPartialUpdate(params *BillingCustomersPartialUpdateParams) (*BillingCustomersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersPartialUpdateOK), nil

}

/*
BillingCustomersRead billing customers read API
*/
func (a *Client) BillingCustomersRead(params *BillingCustomersReadParams) (*BillingCustomersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersReadOK), nil

}

/*
BillingCustomersUpdate billing customers update API
*/
func (a *Client) BillingCustomersUpdate(params *BillingCustomersUpdateParams) (*BillingCustomersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingCustomersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_customers_update",
		Method:             "PUT",
		PathPattern:        "/{namespace}/billing/customers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingCustomersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingCustomersUpdateOK), nil

}

/*
BillingInvoicesList billing invoices list API
*/
func (a *Client) BillingInvoicesList(params *BillingInvoicesListParams) (*BillingInvoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingInvoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_invoices_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/invoices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingInvoicesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingInvoicesListOK), nil

}

/*
BillingInvoicesRead billing invoices read API
*/
func (a *Client) BillingInvoicesRead(params *BillingInvoicesReadParams) (*BillingInvoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingInvoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_invoices_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/invoices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingInvoicesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingInvoicesReadOK), nil

}

/*
BillingPlansCreate billing plans create API
*/
func (a *Client) BillingPlansCreate(params *BillingPlansCreateParams) (*BillingPlansCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/billing/plans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansCreateCreated), nil

}

/*
BillingPlansDelete billing plans delete API
*/
func (a *Client) BillingPlansDelete(params *BillingPlansDeleteParams) (*BillingPlansDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_delete",
		Method:             "DELETE",
		PathPattern:        "/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansDeleteNoContent), nil

}

/*
BillingPlansList billing plans list API
*/
func (a *Client) BillingPlansList(params *BillingPlansListParams) (*BillingPlansListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/plans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansListOK), nil

}

/*
BillingPlansPartialUpdate billing plans partial update API
*/
func (a *Client) BillingPlansPartialUpdate(params *BillingPlansPartialUpdateParams) (*BillingPlansPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_partial_update",
		Method:             "PATCH",
		PathPattern:        "/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansPartialUpdateOK), nil

}

/*
BillingPlansRead billing plans read API
*/
func (a *Client) BillingPlansRead(params *BillingPlansReadParams) (*BillingPlansReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansReadOK), nil

}

/*
BillingPlansUpdate billing plans update API
*/
func (a *Client) BillingPlansUpdate(params *BillingPlansUpdateParams) (*BillingPlansUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingPlansUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_plans_update",
		Method:             "PUT",
		PathPattern:        "/{namespace}/billing/plans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingPlansUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingPlansUpdateOK), nil

}

/*
BillingSubscriptionRequiredCreate billing subscription required create API
*/
func (a *Client) BillingSubscriptionRequiredCreate(params *BillingSubscriptionRequiredCreateParams) (*BillingSubscriptionRequiredCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionRequiredCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscription_required_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/billing/subscription_required/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionRequiredCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionRequiredCreateCreated), nil

}

/*
BillingSubscriptionRequiredList billing subscription required list API
*/
func (a *Client) BillingSubscriptionRequiredList(params *BillingSubscriptionRequiredListParams) (*BillingSubscriptionRequiredListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionRequiredListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscription_required_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/subscription_required/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionRequiredListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionRequiredListOK), nil

}

/*
BillingSubscriptionsCreate billing subscriptions create API
*/
func (a *Client) BillingSubscriptionsCreate(params *BillingSubscriptionsCreateParams) (*BillingSubscriptionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/billing/subscriptions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsCreateCreated), nil

}

/*
BillingSubscriptionsDelete billing subscriptions delete API
*/
func (a *Client) BillingSubscriptionsDelete(params *BillingSubscriptionsDeleteParams) (*BillingSubscriptionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_delete",
		Method:             "DELETE",
		PathPattern:        "/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsDeleteNoContent), nil

}

/*
BillingSubscriptionsList billing subscriptions list API
*/
func (a *Client) BillingSubscriptionsList(params *BillingSubscriptionsListParams) (*BillingSubscriptionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/subscriptions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsListOK), nil

}

/*
BillingSubscriptionsPartialUpdate billing subscriptions partial update API
*/
func (a *Client) BillingSubscriptionsPartialUpdate(params *BillingSubscriptionsPartialUpdateParams) (*BillingSubscriptionsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_partial_update",
		Method:             "PATCH",
		PathPattern:        "/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsPartialUpdateOK), nil

}

/*
BillingSubscriptionsRead billing subscriptions read API
*/
func (a *Client) BillingSubscriptionsRead(params *BillingSubscriptionsReadParams) (*BillingSubscriptionsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsReadOK), nil

}

/*
BillingSubscriptionsUpdate billing subscriptions update API
*/
func (a *Client) BillingSubscriptionsUpdate(params *BillingSubscriptionsUpdateParams) (*BillingSubscriptionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingSubscriptionsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "billing_subscriptions_update",
		Method:             "PUT",
		PathPattern:        "/{namespace}/billing/subscriptions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillingSubscriptionsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BillingSubscriptionsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
