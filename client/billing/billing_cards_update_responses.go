package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// BillingCardsUpdateReader is a Reader for the BillingCardsUpdate structure.
type BillingCardsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BillingCardsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBillingCardsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBillingCardsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewBillingCardsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBillingCardsUpdateOK creates a BillingCardsUpdateOK with default headers values
func NewBillingCardsUpdateOK() *BillingCardsUpdateOK {
	return &BillingCardsUpdateOK{}
}

/*BillingCardsUpdateOK handles this case with default header values.

Card updated
*/
type BillingCardsUpdateOK struct {
	Payload *models.Card
}

func (o *BillingCardsUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *BillingCardsUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/billing/cards/{id}/][%d] billingCardsUpdateOK  %+v", 200, o.Payload)
}

func (o *BillingCardsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Card)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingCardsUpdateBadRequest creates a BillingCardsUpdateBadRequest with default headers values
func NewBillingCardsUpdateBadRequest() *BillingCardsUpdateBadRequest {
	return &BillingCardsUpdateBadRequest{}
}

/*BillingCardsUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type BillingCardsUpdateBadRequest struct {
	Payload *models.CardUpdateError
}

func (o *BillingCardsUpdateBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *BillingCardsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/billing/cards/{id}/][%d] billingCardsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *BillingCardsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CardUpdateError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingCardsUpdateNotFound creates a BillingCardsUpdateNotFound with default headers values
func NewBillingCardsUpdateNotFound() *BillingCardsUpdateNotFound {
	return &BillingCardsUpdateNotFound{}
}

/*BillingCardsUpdateNotFound handles this case with default header values.

Card not found
*/
type BillingCardsUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *BillingCardsUpdateNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *BillingCardsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/billing/cards/{id}/][%d] billingCardsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *BillingCardsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
