package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// BillingPlansUpdateReader is a Reader for the BillingPlansUpdate structure.
type BillingPlansUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BillingPlansUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBillingPlansUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBillingPlansUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBillingPlansUpdateOK creates a BillingPlansUpdateOK with default headers values
func NewBillingPlansUpdateOK() *BillingPlansUpdateOK {
	return &BillingPlansUpdateOK{}
}

/*BillingPlansUpdateOK handles this case with default header values.

Plan updated
*/
type BillingPlansUpdateOK struct {
	Payload *models.Plan
}

func (o *BillingPlansUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /{namespace}/billing/plans/{id}/][%d] billingPlansUpdateOK  %+v", 200, o.Payload)
}

func (o *BillingPlansUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingPlansUpdateBadRequest creates a BillingPlansUpdateBadRequest with default headers values
func NewBillingPlansUpdateBadRequest() *BillingPlansUpdateBadRequest {
	return &BillingPlansUpdateBadRequest{}
}

/*BillingPlansUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type BillingPlansUpdateBadRequest struct {
	Payload BillingPlansUpdateBadRequestBody
}

func (o *BillingPlansUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{namespace}/billing/plans/{id}/][%d] billingPlansUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *BillingPlansUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BillingPlansUpdateBadRequestBody billing plans update bad request body
swagger:model BillingPlansUpdateBadRequestBody
*/
type BillingPlansUpdateBadRequestBody struct {

	// amount field errors
	// Required: true
	Amount []string `json:"amount"`

	// created field errors
	// Required: true
	Created []string `json:"created"`

	// currency field errors
	// Required: true
	Currency []string `json:"currency"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// interval field errors
	// Required: true
	Interval []string `json:"interval"`

	// interval_count field errors
	// Required: true
	IntervalCount []string `json:"interval_count"`

	// livemode field errors
	// Required: true
	Livemode []string `json:"livemode"`

	// metadata field errors
	// Required: true
	Metadata []string `json:"metadata"`

	// name field errors
	// Required: true
	Name []string `json:"name"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// statement_descriptor field errors
	// Required: true
	StatementDescriptor []string `json:"statement_descriptor"`

	// stripe_id field errors
	// Required: true
	StripeID []string `json:"stripe_id"`

	// trial_period_days field errors
	// Required: true
	TrialPeriodDays []string `json:"trial_period_days"`
}

// Validate validates this billing plans update bad request body
func (o *BillingPlansUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateInterval(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateIntervalCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateLivemode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStatementDescriptor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStripeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateTrialPeriodDays(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"amount", "body", o.Amount); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"created", "body", o.Created); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"currency", "body", o.Currency); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"interval", "body", o.Interval); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateIntervalCount(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"interval_count", "body", o.IntervalCount); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateLivemode(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"livemode", "body", o.Livemode); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateMetadata(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"metadata", "body", o.Metadata); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateStatementDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"statement_descriptor", "body", o.StatementDescriptor); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateStripeID(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"stripe_id", "body", o.StripeID); err != nil {
		return err
	}

	return nil
}

func (o *BillingPlansUpdateBadRequestBody) validateTrialPeriodDays(formats strfmt.Registry) error {

	if err := validate.Required("billingPlansUpdateBadRequest"+"."+"trial_period_days", "body", o.TrialPeriodDays); err != nil {
		return err
	}

	return nil
}

/*BillingPlansUpdateBody billing plans update body
swagger:model BillingPlansUpdateBody
*/
type BillingPlansUpdateBody struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// currency
	Currency string `json:"currency,omitempty"`

	// interval
	// Required: true
	Interval *string `json:"interval"`

	// interval count
	// Required: true
	IntervalCount *int64 `json:"interval_count"`

	// livemode
	Livemode bool `json:"livemode,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// statement descriptor
	StatementDescriptor string `json:"statement_descriptor,omitempty"`

	// trial period days
	TrialPeriodDays int64 `json:"trial_period_days,omitempty"`
}
