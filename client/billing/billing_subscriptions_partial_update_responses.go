package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// BillingSubscriptionsPartialUpdateReader is a Reader for the BillingSubscriptionsPartialUpdate structure.
type BillingSubscriptionsPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BillingSubscriptionsPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBillingSubscriptionsPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBillingSubscriptionsPartialUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewBillingSubscriptionsPartialUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBillingSubscriptionsPartialUpdateOK creates a BillingSubscriptionsPartialUpdateOK with default headers values
func NewBillingSubscriptionsPartialUpdateOK() *BillingSubscriptionsPartialUpdateOK {
	return &BillingSubscriptionsPartialUpdateOK{}
}

/*BillingSubscriptionsPartialUpdateOK handles this case with default header values.

Subscription updated
*/
type BillingSubscriptionsPartialUpdateOK struct {
	Payload *models.Subscription
}

func (o *BillingSubscriptionsPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/billing/subscriptions/{id}/][%d] billingSubscriptionsPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *BillingSubscriptionsPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Subscription)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingSubscriptionsPartialUpdateBadRequest creates a BillingSubscriptionsPartialUpdateBadRequest with default headers values
func NewBillingSubscriptionsPartialUpdateBadRequest() *BillingSubscriptionsPartialUpdateBadRequest {
	return &BillingSubscriptionsPartialUpdateBadRequest{}
}

/*BillingSubscriptionsPartialUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type BillingSubscriptionsPartialUpdateBadRequest struct {
	Payload BillingSubscriptionsPartialUpdateBadRequestBody
}

func (o *BillingSubscriptionsPartialUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/billing/subscriptions/{id}/][%d] billingSubscriptionsPartialUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *BillingSubscriptionsPartialUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingSubscriptionsPartialUpdateNotFound creates a BillingSubscriptionsPartialUpdateNotFound with default headers values
func NewBillingSubscriptionsPartialUpdateNotFound() *BillingSubscriptionsPartialUpdateNotFound {
	return &BillingSubscriptionsPartialUpdateNotFound{}
}

/*BillingSubscriptionsPartialUpdateNotFound handles this case with default header values.

Subscription not found
*/
type BillingSubscriptionsPartialUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *BillingSubscriptionsPartialUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/billing/subscriptions/{id}/][%d] billingSubscriptionsPartialUpdateNotFound  %+v", 404, o.Payload)
}

func (o *BillingSubscriptionsPartialUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BillingSubscriptionsPartialUpdateBadRequestBody billing subscriptions partial update bad request body
swagger:model BillingSubscriptionsPartialUpdateBadRequestBody
*/
type BillingSubscriptionsPartialUpdateBadRequestBody struct {

	// application_fee_percent field errors
	// Required: true
	ApplicationFeePercent []string `json:"application_fee_percent"`

	// cancel_at_period_end field errors
	// Required: true
	CancelAtPeriodEnd []string `json:"cancel_at_period_end"`

	// canceled_at field errors
	// Required: true
	CanceledAt []string `json:"canceled_at"`

	// created field errors
	// Required: true
	Created []string `json:"created"`

	// current_period_end field errors
	// Required: true
	CurrentPeriodEnd []string `json:"current_period_end"`

	// current_period_start field errors
	// Required: true
	CurrentPeriodStart []string `json:"current_period_start"`

	// ended_at field errors
	// Required: true
	EndedAt []string `json:"ended_at"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// livemode field errors
	// Required: true
	Livemode []string `json:"livemode"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// plan field errors
	// Required: true
	Plan []string `json:"plan"`

	// quantity field errors
	// Required: true
	Quantity []string `json:"quantity"`

	// start field errors
	// Required: true
	Start []string `json:"start"`

	// status field errors
	// Required: true
	Status []string `json:"status"`

	// stripe_id field errors
	// Required: true
	StripeID []string `json:"stripe_id"`

	// trial_end field errors
	// Required: true
	TrialEnd []string `json:"trial_end"`

	// trial_start field errors
	// Required: true
	TrialStart []string `json:"trial_start"`
}

// Validate validates this billing subscriptions partial update bad request body
func (o *BillingSubscriptionsPartialUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateApplicationFeePercent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCancelAtPeriodEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCanceledAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCurrentPeriodEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateCurrentPeriodStart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateEndedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateLivemode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStripeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateTrialEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateTrialStart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateApplicationFeePercent(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"application_fee_percent", "body", o.ApplicationFeePercent); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateCancelAtPeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"cancel_at_period_end", "body", o.CancelAtPeriodEnd); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateCanceledAt(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"canceled_at", "body", o.CanceledAt); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"created", "body", o.Created); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateCurrentPeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"current_period_end", "body", o.CurrentPeriodEnd); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateCurrentPeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"current_period_start", "body", o.CurrentPeriodStart); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateEndedAt(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"ended_at", "body", o.EndedAt); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateLivemode(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"livemode", "body", o.Livemode); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"plan", "body", o.Plan); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"quantity", "body", o.Quantity); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateStripeID(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"stripe_id", "body", o.StripeID); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateTrialEnd(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"trial_end", "body", o.TrialEnd); err != nil {
		return err
	}

	return nil
}

func (o *BillingSubscriptionsPartialUpdateBadRequestBody) validateTrialStart(formats strfmt.Registry) error {

	if err := validate.Required("billingSubscriptionsPartialUpdateBadRequest"+"."+"trial_start", "body", o.TrialStart); err != nil {
		return err
	}

	return nil
}

/*BillingSubscriptionsPartialUpdateBody billing subscriptions partial update body
swagger:model BillingSubscriptionsPartialUpdateBody
*/
type BillingSubscriptionsPartialUpdateBody struct {

	// plan
	Plan string `json:"plan,omitempty"`
}
