// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// NewBillingCardsCreateParams creates a new BillingCardsCreateParams object
// with the default values initialized.
func NewBillingCardsCreateParams() *BillingCardsCreateParams {
	var ()
	return &BillingCardsCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBillingCardsCreateParamsWithTimeout creates a new BillingCardsCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBillingCardsCreateParamsWithTimeout(timeout time.Duration) *BillingCardsCreateParams {
	var ()
	return &BillingCardsCreateParams{

		timeout: timeout,
	}
}

// NewBillingCardsCreateParamsWithContext creates a new BillingCardsCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewBillingCardsCreateParamsWithContext(ctx context.Context) *BillingCardsCreateParams {
	var ()
	return &BillingCardsCreateParams{

		Context: ctx,
	}
}

// NewBillingCardsCreateParamsWithHTTPClient creates a new BillingCardsCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBillingCardsCreateParamsWithHTTPClient(client *http.Client) *BillingCardsCreateParams {
	var ()
	return &BillingCardsCreateParams{
		HTTPClient: client,
	}
}

/*BillingCardsCreateParams contains all the parameters to send to the API endpoint
for the billing cards create operation typically these are written to a http.Request
*/
type BillingCardsCreateParams struct {

	/*Data*/
	Data *models.CardData
	/*Namespace
	  User or team name.

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the billing cards create params
func (o *BillingCardsCreateParams) WithTimeout(timeout time.Duration) *BillingCardsCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the billing cards create params
func (o *BillingCardsCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the billing cards create params
func (o *BillingCardsCreateParams) WithContext(ctx context.Context) *BillingCardsCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the billing cards create params
func (o *BillingCardsCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the billing cards create params
func (o *BillingCardsCreateParams) WithHTTPClient(client *http.Client) *BillingCardsCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the billing cards create params
func (o *BillingCardsCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the billing cards create params
func (o *BillingCardsCreateParams) WithData(data *models.CardData) *BillingCardsCreateParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the billing cards create params
func (o *BillingCardsCreateParams) SetData(data *models.CardData) {
	o.Data = data
}

// WithNamespace adds the namespace to the billing cards create params
func (o *BillingCardsCreateParams) WithNamespace(namespace string) *BillingCardsCreateParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the billing cards create params
func (o *BillingCardsCreateParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *BillingCardsCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Data == nil {
		o.Data = new(models.CardData)
	}

	if err := r.SetBodyParam(o.Data); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
