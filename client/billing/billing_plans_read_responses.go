// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// BillingPlansReadReader is a Reader for the BillingPlansRead structure.
type BillingPlansReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BillingPlansReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewBillingPlansReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewBillingPlansReadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBillingPlansReadOK creates a BillingPlansReadOK with default headers values
func NewBillingPlansReadOK() *BillingPlansReadOK {
	return &BillingPlansReadOK{}
}

/*BillingPlansReadOK handles this case with default header values.

Plan retrieved
*/
type BillingPlansReadOK struct {
	Payload *models.Plan
}

func (o *BillingPlansReadOK) Error() string {
	return fmt.Sprintf("[GET /v1/{namespace}/billing/plans/{id}/][%d] billingPlansReadOK  %+v", 200, o.Payload)
}

func (o *BillingPlansReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBillingPlansReadNotFound creates a BillingPlansReadNotFound with default headers values
func NewBillingPlansReadNotFound() *BillingPlansReadNotFound {
	return &BillingPlansReadNotFound{}
}

/*BillingPlansReadNotFound handles this case with default header values.

Plan not found
*/
type BillingPlansReadNotFound struct {
	Payload *models.NotFound
}

func (o *BillingPlansReadNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/{namespace}/billing/plans/{id}/][%d] billingPlansReadNotFound  %+v", 404, o.Payload)
}

func (o *BillingPlansReadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
