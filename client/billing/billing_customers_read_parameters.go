// Code generated by go-swagger; DO NOT EDIT.

package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewBillingCustomersReadParams creates a new BillingCustomersReadParams object
// with the default values initialized.
func NewBillingCustomersReadParams() *BillingCustomersReadParams {
	var ()
	return &BillingCustomersReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBillingCustomersReadParamsWithTimeout creates a new BillingCustomersReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBillingCustomersReadParamsWithTimeout(timeout time.Duration) *BillingCustomersReadParams {
	var ()
	return &BillingCustomersReadParams{

		timeout: timeout,
	}
}

// NewBillingCustomersReadParamsWithContext creates a new BillingCustomersReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewBillingCustomersReadParamsWithContext(ctx context.Context) *BillingCustomersReadParams {
	var ()
	return &BillingCustomersReadParams{

		Context: ctx,
	}
}

// NewBillingCustomersReadParamsWithHTTPClient creates a new BillingCustomersReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBillingCustomersReadParamsWithHTTPClient(client *http.Client) *BillingCustomersReadParams {
	var ()
	return &BillingCustomersReadParams{
		HTTPClient: client,
	}
}

/*BillingCustomersReadParams contains all the parameters to send to the API endpoint
for the billing customers read operation typically these are written to a http.Request
*/
type BillingCustomersReadParams struct {

	/*ID
	  Customer unique identifier.

	*/
	ID string
	/*Namespace
	  User or team name.

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the billing customers read params
func (o *BillingCustomersReadParams) WithTimeout(timeout time.Duration) *BillingCustomersReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the billing customers read params
func (o *BillingCustomersReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the billing customers read params
func (o *BillingCustomersReadParams) WithContext(ctx context.Context) *BillingCustomersReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the billing customers read params
func (o *BillingCustomersReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the billing customers read params
func (o *BillingCustomersReadParams) WithHTTPClient(client *http.Client) *BillingCustomersReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the billing customers read params
func (o *BillingCustomersReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the billing customers read params
func (o *BillingCustomersReadParams) WithID(id string) *BillingCustomersReadParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the billing customers read params
func (o *BillingCustomersReadParams) SetID(id string) {
	o.ID = id
}

// WithNamespace adds the namespace to the billing customers read params
func (o *BillingCustomersReadParams) WithNamespace(namespace string) *BillingCustomersReadParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the billing customers read params
func (o *BillingCustomersReadParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *BillingCustomersReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
