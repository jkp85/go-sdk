// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NewTeamsUpdateParams creates a new TeamsUpdateParams object
// with the default values initialized.
func NewTeamsUpdateParams() *TeamsUpdateParams {
	var ()
	return &TeamsUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTeamsUpdateParamsWithTimeout creates a new TeamsUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTeamsUpdateParamsWithTimeout(timeout time.Duration) *TeamsUpdateParams {
	var ()
	return &TeamsUpdateParams{

		timeout: timeout,
	}
}

// NewTeamsUpdateParamsWithContext creates a new TeamsUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewTeamsUpdateParamsWithContext(ctx context.Context) *TeamsUpdateParams {
	var ()
	return &TeamsUpdateParams{

		Context: ctx,
	}
}

// NewTeamsUpdateParamsWithHTTPClient creates a new TeamsUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTeamsUpdateParamsWithHTTPClient(client *http.Client) *TeamsUpdateParams {
	var ()
	return &TeamsUpdateParams{
		HTTPClient: client,
	}
}

/*TeamsUpdateParams contains all the parameters to send to the API endpoint
for the teams update operation typically these are written to a http.Request
*/
type TeamsUpdateParams struct {

	/*Team
	  Team unique identifier expressed as UUID or name.

	*/
	Team string
	/*TeamData*/
	TeamData *models.TeamData

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the teams update params
func (o *TeamsUpdateParams) WithTimeout(timeout time.Duration) *TeamsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the teams update params
func (o *TeamsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the teams update params
func (o *TeamsUpdateParams) WithContext(ctx context.Context) *TeamsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the teams update params
func (o *TeamsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the teams update params
func (o *TeamsUpdateParams) WithHTTPClient(client *http.Client) *TeamsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the teams update params
func (o *TeamsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTeam adds the team to the teams update params
func (o *TeamsUpdateParams) WithTeam(team string) *TeamsUpdateParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the teams update params
func (o *TeamsUpdateParams) SetTeam(team string) {
	o.Team = team
}

// WithTeamData adds the teamData to the teams update params
func (o *TeamsUpdateParams) WithTeamData(teamData *models.TeamData) *TeamsUpdateParams {
	o.SetTeamData(teamData)
	return o
}

// SetTeamData adds the teamData to the teams update params
func (o *TeamsUpdateParams) SetTeamData(teamData *models.TeamData) {
	o.TeamData = teamData
}

// WriteToRequest writes these params to a swagger request
func (o *TeamsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if o.TeamData != nil {
		if err := r.SetBodyParam(o.TeamData); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
