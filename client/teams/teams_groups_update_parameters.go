// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NewTeamsGroupsUpdateParams creates a new TeamsGroupsUpdateParams object
// with the default values initialized.
func NewTeamsGroupsUpdateParams() *TeamsGroupsUpdateParams {
	var ()
	return &TeamsGroupsUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTeamsGroupsUpdateParamsWithTimeout creates a new TeamsGroupsUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTeamsGroupsUpdateParamsWithTimeout(timeout time.Duration) *TeamsGroupsUpdateParams {
	var ()
	return &TeamsGroupsUpdateParams{

		timeout: timeout,
	}
}

// NewTeamsGroupsUpdateParamsWithContext creates a new TeamsGroupsUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewTeamsGroupsUpdateParamsWithContext(ctx context.Context) *TeamsGroupsUpdateParams {
	var ()
	return &TeamsGroupsUpdateParams{

		Context: ctx,
	}
}

// NewTeamsGroupsUpdateParamsWithHTTPClient creates a new TeamsGroupsUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTeamsGroupsUpdateParamsWithHTTPClient(client *http.Client) *TeamsGroupsUpdateParams {
	var ()
	return &TeamsGroupsUpdateParams{
		HTTPClient: client,
	}
}

/*TeamsGroupsUpdateParams contains all the parameters to send to the API endpoint
for the teams groups update operation typically these are written to a http.Request
*/
type TeamsGroupsUpdateParams struct {

	/*Group
	  Group unique identifier expressed as UUID or name.

	*/
	Group string
	/*GroupData*/
	GroupData *models.GroupData
	/*Team
	  Team unique identifier expressed as UUID or name.

	*/
	Team string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithTimeout(timeout time.Duration) *TeamsGroupsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithContext(ctx context.Context) *TeamsGroupsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithHTTPClient(client *http.Client) *TeamsGroupsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithGroup(group string) *TeamsGroupsUpdateParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetGroup(group string) {
	o.Group = group
}

// WithGroupData adds the groupData to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithGroupData(groupData *models.GroupData) *TeamsGroupsUpdateParams {
	o.SetGroupData(groupData)
	return o
}

// SetGroupData adds the groupData to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetGroupData(groupData *models.GroupData) {
	o.GroupData = groupData
}

// WithTeam adds the team to the teams groups update params
func (o *TeamsGroupsUpdateParams) WithTeam(team string) *TeamsGroupsUpdateParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the teams groups update params
func (o *TeamsGroupsUpdateParams) SetTeam(team string) {
	o.Team = team
}

// WriteToRequest writes these params to a swagger request
func (o *TeamsGroupsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param group
	if err := r.SetPathParam("group", o.Group); err != nil {
		return err
	}

	if o.GroupData != nil {
		if err := r.SetBodyParam(o.GroupData); err != nil {
			return err
		}
	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
