package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// ServiceTriggerReplaceReader is a Reader for the ServiceTriggerReplace structure.
type ServiceTriggerReplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceTriggerReplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServiceTriggerReplaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewServiceTriggerReplaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewServiceTriggerReplaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServiceTriggerReplaceOK creates a ServiceTriggerReplaceOK with default headers values
func NewServiceTriggerReplaceOK() *ServiceTriggerReplaceOK {
	return &ServiceTriggerReplaceOK{}
}

/*ServiceTriggerReplaceOK handles this case with default header values.

ServerAction updated.
*/
type ServiceTriggerReplaceOK struct {
	Payload *models.ServerAction
}

func (o *ServiceTriggerReplaceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ServiceTriggerReplaceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/][%d] serviceTriggerReplaceOK  %+v", 200, o.Payload)
}

func (o *ServiceTriggerReplaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerAction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceTriggerReplaceBadRequest creates a ServiceTriggerReplaceBadRequest with default headers values
func NewServiceTriggerReplaceBadRequest() *ServiceTriggerReplaceBadRequest {
	return &ServiceTriggerReplaceBadRequest{}
}

/*ServiceTriggerReplaceBadRequest handles this case with default header values.

Invalid data supplied.
*/
type ServiceTriggerReplaceBadRequest struct {
	Payload *models.ServerActionError
}

func (o *ServiceTriggerReplaceBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *ServiceTriggerReplaceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/][%d] serviceTriggerReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *ServiceTriggerReplaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerActionError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceTriggerReplaceNotFound creates a ServiceTriggerReplaceNotFound with default headers values
func NewServiceTriggerReplaceNotFound() *ServiceTriggerReplaceNotFound {
	return &ServiceTriggerReplaceNotFound{}
}

/*ServiceTriggerReplaceNotFound handles this case with default header values.

Server action not found.
*/
type ServiceTriggerReplaceNotFound struct {
	Payload *models.NotFound
}

func (o *ServiceTriggerReplaceNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ServiceTriggerReplaceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/][%d] serviceTriggerReplaceNotFound  %+v", 404, o.Payload)
}

func (o *ServiceTriggerReplaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
