package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectsRunStatsUpdateParams creates a new ProjectsRunStatsUpdateParams object
// with the default values initialized.
func NewProjectsRunStatsUpdateParams() *ProjectsRunStatsUpdateParams {
	var ()
	return &ProjectsRunStatsUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsRunStatsUpdateParamsWithTimeout creates a new ProjectsRunStatsUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsRunStatsUpdateParamsWithTimeout(timeout time.Duration) *ProjectsRunStatsUpdateParams {
	var ()
	return &ProjectsRunStatsUpdateParams{

		timeout: timeout,
	}
}

// NewProjectsRunStatsUpdateParamsWithContext creates a new ProjectsRunStatsUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsRunStatsUpdateParamsWithContext(ctx context.Context) *ProjectsRunStatsUpdateParams {
	var ()
	return &ProjectsRunStatsUpdateParams{

		Context: ctx,
	}
}

// NewProjectsRunStatsUpdateParamsWithHTTPClient creates a new ProjectsRunStatsUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsRunStatsUpdateParamsWithHTTPClient(client *http.Client) *ProjectsRunStatsUpdateParams {
	var ()
	return &ProjectsRunStatsUpdateParams{
		HTTPClient: client,
	}
}

/*ProjectsRunStatsUpdateParams contains all the parameters to send to the API endpoint
for the projects run stats update operation typically these are written to a http.Request
*/
type ProjectsRunStatsUpdateParams struct {

	/*Data*/
	Data ProjectsRunStatsUpdateBody
	/*ID*/
	ID string
	/*Namespace*/
	Namespace string
	/*ProjectPk*/
	ProjectPk string
	/*ServerPk*/
	ServerPk string
	/*ServerType*/
	ServerType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithTimeout(timeout time.Duration) *ProjectsRunStatsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithContext(ctx context.Context) *ProjectsRunStatsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithHTTPClient(client *http.Client) *ProjectsRunStatsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithData(data ProjectsRunStatsUpdateBody) *ProjectsRunStatsUpdateParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetData(data ProjectsRunStatsUpdateBody) {
	o.Data = data
}

// WithID adds the id to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithID(id string) *ProjectsRunStatsUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetID(id string) {
	o.ID = id
}

// WithNamespace adds the namespace to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithNamespace(namespace string) *ProjectsRunStatsUpdateParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithProjectPk adds the projectPk to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithProjectPk(projectPk string) *ProjectsRunStatsUpdateParams {
	o.SetProjectPk(projectPk)
	return o
}

// SetProjectPk adds the projectPk to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetProjectPk(projectPk string) {
	o.ProjectPk = projectPk
}

// WithServerPk adds the serverPk to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithServerPk(serverPk string) *ProjectsRunStatsUpdateParams {
	o.SetServerPk(serverPk)
	return o
}

// SetServerPk adds the serverPk to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetServerPk(serverPk string) {
	o.ServerPk = serverPk
}

// WithServerType adds the serverType to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) WithServerType(serverType string) *ProjectsRunStatsUpdateParams {
	o.SetServerType(serverType)
	return o
}

// SetServerType adds the serverType to the projects run stats update params
func (o *ProjectsRunStatsUpdateParams) SetServerType(serverType string) {
	o.ServerType = serverType
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsRunStatsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if err := r.SetBodyParam(o.Data); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param project_pk
	if err := r.SetPathParam("project_pk", o.ProjectPk); err != nil {
		return err
	}

	// path param server_pk
	if err := r.SetPathParam("server_pk", o.ServerPk); err != nil {
		return err
	}

	// path param server_type
	if err := r.SetPathParam("server_type", o.ServerType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
