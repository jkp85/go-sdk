package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ProjectsCollaboratorsUpdateReader is a Reader for the ProjectsCollaboratorsUpdate structure.
type ProjectsCollaboratorsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsCollaboratorsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectsCollaboratorsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectsCollaboratorsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsCollaboratorsUpdateOK creates a ProjectsCollaboratorsUpdateOK with default headers values
func NewProjectsCollaboratorsUpdateOK() *ProjectsCollaboratorsUpdateOK {
	return &ProjectsCollaboratorsUpdateOK{}
}

/*ProjectsCollaboratorsUpdateOK handles this case with default header values.

Collaborator updated
*/
type ProjectsCollaboratorsUpdateOK struct {
	Payload *models.Collaborator
}

func (o *ProjectsCollaboratorsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /{namespace}/projects/{project_pk}/collaborators/{id}/][%d] projectsCollaboratorsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectsCollaboratorsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Collaborator)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCollaboratorsUpdateBadRequest creates a ProjectsCollaboratorsUpdateBadRequest with default headers values
func NewProjectsCollaboratorsUpdateBadRequest() *ProjectsCollaboratorsUpdateBadRequest {
	return &ProjectsCollaboratorsUpdateBadRequest{}
}

/*ProjectsCollaboratorsUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type ProjectsCollaboratorsUpdateBadRequest struct {
	Payload ProjectsCollaboratorsUpdateBadRequestBody
}

func (o *ProjectsCollaboratorsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /{namespace}/projects/{project_pk}/collaborators/{id}/][%d] projectsCollaboratorsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsCollaboratorsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProjectsCollaboratorsUpdateBadRequestBody projects collaborators update bad request body
swagger:model ProjectsCollaboratorsUpdateBadRequestBody
*/
type ProjectsCollaboratorsUpdateBadRequestBody struct {

	// email field errors
	// Required: true
	Email []string `json:"email"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// joined field errors
	// Required: true
	Joined []string `json:"joined"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// owner field errors
	// Required: true
	Owner []string `json:"owner"`
}

// Validate validates this projects collaborators update bad request body
func (o *ProjectsCollaboratorsUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateJoined(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsCollaboratorsUpdateBadRequestBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("projectsCollaboratorsUpdateBadRequest"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsCollaboratorsUpdateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("projectsCollaboratorsUpdateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsCollaboratorsUpdateBadRequestBody) validateJoined(formats strfmt.Registry) error {

	if err := validate.Required("projectsCollaboratorsUpdateBadRequest"+"."+"joined", "body", o.Joined); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsCollaboratorsUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("projectsCollaboratorsUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsCollaboratorsUpdateBadRequestBody) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("projectsCollaboratorsUpdateBadRequest"+"."+"owner", "body", o.Owner); err != nil {
		return err
	}

	return nil
}

/*ProjectsCollaboratorsUpdateBody projects collaborators update body
swagger:model ProjectsCollaboratorsUpdateBody
*/
type ProjectsCollaboratorsUpdateBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// owner
	Owner bool `json:"owner,omitempty"`
}
