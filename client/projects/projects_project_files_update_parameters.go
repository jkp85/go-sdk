package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"os"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectsProjectFilesUpdateParams creates a new ProjectsProjectFilesUpdateParams object
// with the default values initialized.
func NewProjectsProjectFilesUpdateParams() *ProjectsProjectFilesUpdateParams {
	var ()
	return &ProjectsProjectFilesUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsProjectFilesUpdateParamsWithTimeout creates a new ProjectsProjectFilesUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsProjectFilesUpdateParamsWithTimeout(timeout time.Duration) *ProjectsProjectFilesUpdateParams {
	var ()
	return &ProjectsProjectFilesUpdateParams{

		timeout: timeout,
	}
}

// NewProjectsProjectFilesUpdateParamsWithContext creates a new ProjectsProjectFilesUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsProjectFilesUpdateParamsWithContext(ctx context.Context) *ProjectsProjectFilesUpdateParams {
	var ()
	return &ProjectsProjectFilesUpdateParams{

		Context: ctx,
	}
}

// NewProjectsProjectFilesUpdateParamsWithHTTPClient creates a new ProjectsProjectFilesUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsProjectFilesUpdateParamsWithHTTPClient(client *http.Client) *ProjectsProjectFilesUpdateParams {
	var ()
	return &ProjectsProjectFilesUpdateParams{
		HTTPClient: client,
	}
}

/*ProjectsProjectFilesUpdateParams contains all the parameters to send to the API endpoint
for the projects project files update operation typically these are written to a http.Request
*/
type ProjectsProjectFilesUpdateParams struct {

	/*File*/
	File os.File
	/*ID*/
	ID string
	/*Namespace*/
	Namespace string
	/*Project*/
	Project string
	/*ProjectPk*/
	ProjectPk string
	/*Public*/
	Public *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithTimeout(timeout time.Duration) *ProjectsProjectFilesUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithContext(ctx context.Context) *ProjectsProjectFilesUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithHTTPClient(client *http.Client) *ProjectsProjectFilesUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithFile(file os.File) *ProjectsProjectFilesUpdateParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetFile(file os.File) {
	o.File = file
}

// WithID adds the id to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithID(id string) *ProjectsProjectFilesUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetID(id string) {
	o.ID = id
}

// WithNamespace adds the namespace to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithNamespace(namespace string) *ProjectsProjectFilesUpdateParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithProject adds the project to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithProject(project string) *ProjectsProjectFilesUpdateParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetProject(project string) {
	o.Project = project
}

// WithProjectPk adds the projectPk to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithProjectPk(projectPk string) *ProjectsProjectFilesUpdateParams {
	o.SetProjectPk(projectPk)
	return o
}

// SetProjectPk adds the projectPk to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetProjectPk(projectPk string) {
	o.ProjectPk = projectPk
}

// WithPublic adds the public to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) WithPublic(public *bool) *ProjectsProjectFilesUpdateParams {
	o.SetPublic(public)
	return o
}

// SetPublic adds the public to the projects project files update params
func (o *ProjectsProjectFilesUpdateParams) SetPublic(public *bool) {
	o.Public = public
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsProjectFilesUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param file
	if err := r.SetFileParam("file", &o.File); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// form param project
	frProject := o.Project
	fProject := frProject
	if fProject != "" {
		if err := r.SetFormParam("project", fProject); err != nil {
			return err
		}
	}

	// path param project_pk
	if err := r.SetPathParam("project_pk", o.ProjectPk); err != nil {
		return err
	}

	if o.Public != nil {

		// form param public
		var frPublic bool
		if o.Public != nil {
			frPublic = *o.Public
		}
		fPublic := swag.FormatBool(frPublic)
		if fPublic != "" {
			if err := r.SetFormParam("public", fPublic); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
