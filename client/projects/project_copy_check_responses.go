package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ProjectCopyCheckReader is a Reader for the ProjectCopyCheck structure.
type ProjectCopyCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectCopyCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectCopyCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewProjectCopyCheckNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectCopyCheckOK creates a ProjectCopyCheckOK with default headers values
func NewProjectCopyCheckOK() *ProjectCopyCheckOK {
	return &ProjectCopyCheckOK{}
}

/*ProjectCopyCheckOK handles this case with default header values.

The authenticated has permission to copy this project
*/
type ProjectCopyCheckOK struct {
}

func (o *ProjectCopyCheckOK) Error() string {
	return fmt.Sprintf("[HEAD /v1/{namespace}/projects/project-copy-check/][%d] projectCopyCheckOK ", 200)
}

func (o *ProjectCopyCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProjectCopyCheckNotFound creates a ProjectCopyCheckNotFound with default headers values
func NewProjectCopyCheckNotFound() *ProjectCopyCheckNotFound {
	return &ProjectCopyCheckNotFound{}
}

/*ProjectCopyCheckNotFound handles this case with default header values.

Project not found.
*/
type ProjectCopyCheckNotFound struct {
}

func (o *ProjectCopyCheckNotFound) Error() string {
	return fmt.Sprintf("[HEAD /v1/{namespace}/projects/project-copy-check/][%d] projectCopyCheckNotFound ", 404)
}

func (o *ProjectCopyCheckNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
