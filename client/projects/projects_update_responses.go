// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ProjectsUpdateReader is a Reader for the ProjectsUpdate structure.
type ProjectsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProjectsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsUpdateOK creates a ProjectsUpdateOK with default headers values
func NewProjectsUpdateOK() *ProjectsUpdateOK {
	return &ProjectsUpdateOK{}
}

/*ProjectsUpdateOK handles this case with default header values.

Project updated
*/
type ProjectsUpdateOK struct {
	Payload *models.Project
}

func (o *ProjectsUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/projects/{project}/][%d] projectsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateBadRequest creates a ProjectsUpdateBadRequest with default headers values
func NewProjectsUpdateBadRequest() *ProjectsUpdateBadRequest {
	return &ProjectsUpdateBadRequest{}
}

/*ProjectsUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type ProjectsUpdateBadRequest struct {
	Payload *models.ProjectError
}

func (o *ProjectsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/projects/{project}/][%d] projectsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateNotFound creates a ProjectsUpdateNotFound with default headers values
func NewProjectsUpdateNotFound() *ProjectsUpdateNotFound {
	return &ProjectsUpdateNotFound{}
}

/*ProjectsUpdateNotFound handles this case with default header values.

Project not found
*/
type ProjectsUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *ProjectsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/projects/{project}/][%d] projectsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
