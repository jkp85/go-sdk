// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ProjectsCollaboratorsReplaceReader is a Reader for the ProjectsCollaboratorsReplace structure.
type ProjectsCollaboratorsReplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsCollaboratorsReplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectsCollaboratorsReplaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectsCollaboratorsReplaceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProjectsCollaboratorsReplaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsCollaboratorsReplaceOK creates a ProjectsCollaboratorsReplaceOK with default headers values
func NewProjectsCollaboratorsReplaceOK() *ProjectsCollaboratorsReplaceOK {
	return &ProjectsCollaboratorsReplaceOK{}
}

/*ProjectsCollaboratorsReplaceOK handles this case with default header values.

Collaborator updated
*/
type ProjectsCollaboratorsReplaceOK struct {
	Payload *models.Collaborator
}

func (o *ProjectsCollaboratorsReplaceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project_id}/collaborators/{id}/][%d] projectsCollaboratorsReplaceOK  %+v", 200, o.Payload)
}

func (o *ProjectsCollaboratorsReplaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Collaborator)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCollaboratorsReplaceBadRequest creates a ProjectsCollaboratorsReplaceBadRequest with default headers values
func NewProjectsCollaboratorsReplaceBadRequest() *ProjectsCollaboratorsReplaceBadRequest {
	return &ProjectsCollaboratorsReplaceBadRequest{}
}

/*ProjectsCollaboratorsReplaceBadRequest handles this case with default header values.

Invalid data supplied
*/
type ProjectsCollaboratorsReplaceBadRequest struct {
	Payload *models.CollaboratorError
}

func (o *ProjectsCollaboratorsReplaceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project_id}/collaborators/{id}/][%d] projectsCollaboratorsReplaceBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsCollaboratorsReplaceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CollaboratorError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsCollaboratorsReplaceNotFound creates a ProjectsCollaboratorsReplaceNotFound with default headers values
func NewProjectsCollaboratorsReplaceNotFound() *ProjectsCollaboratorsReplaceNotFound {
	return &ProjectsCollaboratorsReplaceNotFound{}
}

/*ProjectsCollaboratorsReplaceNotFound handles this case with default header values.

Collaborator not found
*/
type ProjectsCollaboratorsReplaceNotFound struct {
	Payload *models.NotFound
}

func (o *ProjectsCollaboratorsReplaceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/{namespace}/projects/{project_id}/collaborators/{id}/][%d] projectsCollaboratorsReplaceNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsCollaboratorsReplaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
