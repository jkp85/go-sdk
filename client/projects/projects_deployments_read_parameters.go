// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectsDeploymentsReadParams creates a new ProjectsDeploymentsReadParams object
// with the default values initialized.
func NewProjectsDeploymentsReadParams() *ProjectsDeploymentsReadParams {
	var ()
	return &ProjectsDeploymentsReadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsDeploymentsReadParamsWithTimeout creates a new ProjectsDeploymentsReadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsDeploymentsReadParamsWithTimeout(timeout time.Duration) *ProjectsDeploymentsReadParams {
	var ()
	return &ProjectsDeploymentsReadParams{

		timeout: timeout,
	}
}

// NewProjectsDeploymentsReadParamsWithContext creates a new ProjectsDeploymentsReadParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsDeploymentsReadParamsWithContext(ctx context.Context) *ProjectsDeploymentsReadParams {
	var ()
	return &ProjectsDeploymentsReadParams{

		Context: ctx,
	}
}

// NewProjectsDeploymentsReadParamsWithHTTPClient creates a new ProjectsDeploymentsReadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsDeploymentsReadParamsWithHTTPClient(client *http.Client) *ProjectsDeploymentsReadParams {
	var ()
	return &ProjectsDeploymentsReadParams{
		HTTPClient: client,
	}
}

/*ProjectsDeploymentsReadParams contains all the parameters to send to the API endpoint
for the projects deployments read operation typically these are written to a http.Request
*/
type ProjectsDeploymentsReadParams struct {

	/*Deployment
	  Deployment unique identifier expressed as UUID or name.

	*/
	Deployment string
	/*Namespace
	  User or team name.

	*/
	Namespace string
	/*Project
	  Project unique identifier expressed as UUID or name.

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithTimeout(timeout time.Duration) *ProjectsDeploymentsReadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithContext(ctx context.Context) *ProjectsDeploymentsReadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithHTTPClient(client *http.Client) *ProjectsDeploymentsReadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeployment adds the deployment to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithDeployment(deployment string) *ProjectsDeploymentsReadParams {
	o.SetDeployment(deployment)
	return o
}

// SetDeployment adds the deployment to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetDeployment(deployment string) {
	o.Deployment = deployment
}

// WithNamespace adds the namespace to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithNamespace(namespace string) *ProjectsDeploymentsReadParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithProject adds the project to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) WithProject(project string) *ProjectsDeploymentsReadParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the projects deployments read params
func (o *ProjectsDeploymentsReadParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsDeploymentsReadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param deployment
	if err := r.SetPathParam("deployment", o.Deployment); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
