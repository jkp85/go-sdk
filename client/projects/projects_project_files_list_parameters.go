// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectsProjectFilesListParams creates a new ProjectsProjectFilesListParams object
// with the default values initialized.
func NewProjectsProjectFilesListParams() *ProjectsProjectFilesListParams {
	var ()
	return &ProjectsProjectFilesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsProjectFilesListParamsWithTimeout creates a new ProjectsProjectFilesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsProjectFilesListParamsWithTimeout(timeout time.Duration) *ProjectsProjectFilesListParams {
	var ()
	return &ProjectsProjectFilesListParams{

		timeout: timeout,
	}
}

// NewProjectsProjectFilesListParamsWithContext creates a new ProjectsProjectFilesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsProjectFilesListParamsWithContext(ctx context.Context) *ProjectsProjectFilesListParams {
	var ()
	return &ProjectsProjectFilesListParams{

		Context: ctx,
	}
}

// NewProjectsProjectFilesListParamsWithHTTPClient creates a new ProjectsProjectFilesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsProjectFilesListParamsWithHTTPClient(client *http.Client) *ProjectsProjectFilesListParams {
	var ()
	return &ProjectsProjectFilesListParams{
		HTTPClient: client,
	}
}

/*ProjectsProjectFilesListParams contains all the parameters to send to the API endpoint
for the projects project files list operation typically these are written to a http.Request
*/
type ProjectsProjectFilesListParams struct {

	/*Content
	  Determines whether or not content is returned as base64. Defaults to false.

	*/
	Content *string
	/*Filename
	  Exact file name, relative to the project root. If no such file is found, an empty list will be returned.

	*/
	Filename *string
	/*Limit
	  Limit when getting project file list.

	*/
	Limit *string
	/*Namespace
	  User or team name.

	*/
	Namespace string
	/*Offset
	  Offset when getting project file list.

	*/
	Offset *string
	/*Ordering
	  Ordering of list values when getting project file list.

	*/
	Ordering *string
	/*Project
	  Unique identifier for project file expressed as UUID or name.

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithTimeout(timeout time.Duration) *ProjectsProjectFilesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithContext(ctx context.Context) *ProjectsProjectFilesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithHTTPClient(client *http.Client) *ProjectsProjectFilesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithContent(content *string) *ProjectsProjectFilesListParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetContent(content *string) {
	o.Content = content
}

// WithFilename adds the filename to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithFilename(filename *string) *ProjectsProjectFilesListParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetFilename(filename *string) {
	o.Filename = filename
}

// WithLimit adds the limit to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithLimit(limit *string) *ProjectsProjectFilesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithNamespace(namespace string) *ProjectsProjectFilesListParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOffset adds the offset to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithOffset(offset *string) *ProjectsProjectFilesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithOrdering(ordering *string) *ProjectsProjectFilesListParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithProject adds the project to the projects project files list params
func (o *ProjectsProjectFilesListParams) WithProject(project string) *ProjectsProjectFilesListParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the projects project files list params
func (o *ProjectsProjectFilesListParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsProjectFilesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Content != nil {

		// query param content
		var qrContent string
		if o.Content != nil {
			qrContent = *o.Content
		}
		qContent := qrContent
		if qContent != "" {
			if err := r.SetQueryParam("content", qContent); err != nil {
				return err
			}
		}

	}

	if o.Filename != nil {

		// query param filename
		var qrFilename string
		if o.Filename != nil {
			qrFilename = *o.Filename
		}
		qFilename := qrFilename
		if qFilename != "" {
			if err := r.SetQueryParam("filename", qFilename); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
