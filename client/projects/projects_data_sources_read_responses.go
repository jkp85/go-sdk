package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkp85/go-sdk/models"
)

// ProjectsDataSourcesReadReader is a Reader for the ProjectsDataSourcesRead structure.
type ProjectsDataSourcesReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsDataSourcesReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectsDataSourcesReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewProjectsDataSourcesReadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsDataSourcesReadOK creates a ProjectsDataSourcesReadOK with default headers values
func NewProjectsDataSourcesReadOK() *ProjectsDataSourcesReadOK {
	return &ProjectsDataSourcesReadOK{}
}

/*ProjectsDataSourcesReadOK handles this case with default header values.

DataSource retrieved
*/
type ProjectsDataSourcesReadOK struct {
	Payload *models.DataSource
}

func (o *ProjectsDataSourcesReadOK) Error() string {
	return fmt.Sprintf("[GET /api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/][%d] projectsDataSourcesReadOK  %+v", 200, o.Payload)
}

func (o *ProjectsDataSourcesReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DataSource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsDataSourcesReadNotFound creates a ProjectsDataSourcesReadNotFound with default headers values
func NewProjectsDataSourcesReadNotFound() *ProjectsDataSourcesReadNotFound {
	return &ProjectsDataSourcesReadNotFound{}
}

/*ProjectsDataSourcesReadNotFound handles this case with default header values.

DataSource not found
*/
type ProjectsDataSourcesReadNotFound struct {
}

func (o *ProjectsDataSourcesReadNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/][%d] projectsDataSourcesReadNotFound ", 404)
}

func (o *ProjectsDataSourcesReadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
