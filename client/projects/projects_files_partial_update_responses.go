package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkp85/go-sdk/models"
)

// ProjectsFilesPartialUpdateReader is a Reader for the ProjectsFilesPartialUpdate structure.
type ProjectsFilesPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsFilesPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProjectsFilesPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectsFilesPartialUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewProjectsFilesPartialUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsFilesPartialUpdateOK creates a ProjectsFilesPartialUpdateOK with default headers values
func NewProjectsFilesPartialUpdateOK() *ProjectsFilesPartialUpdateOK {
	return &ProjectsFilesPartialUpdateOK{}
}

/*ProjectsFilesPartialUpdateOK handles this case with default header values.

File updated
*/
type ProjectsFilesPartialUpdateOK struct {
	Payload *models.File
}

func (o *ProjectsFilesPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v0/{namespace}/projects/{project_pk}/files/{id}/][%d] projectsFilesPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectsFilesPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.File)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsFilesPartialUpdateBadRequest creates a ProjectsFilesPartialUpdateBadRequest with default headers values
func NewProjectsFilesPartialUpdateBadRequest() *ProjectsFilesPartialUpdateBadRequest {
	return &ProjectsFilesPartialUpdateBadRequest{}
}

/*ProjectsFilesPartialUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type ProjectsFilesPartialUpdateBadRequest struct {
	Payload ProjectsFilesPartialUpdateBadRequestBody
}

func (o *ProjectsFilesPartialUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v0/{namespace}/projects/{project_pk}/files/{id}/][%d] projectsFilesPartialUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsFilesPartialUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsFilesPartialUpdateNotFound creates a ProjectsFilesPartialUpdateNotFound with default headers values
func NewProjectsFilesPartialUpdateNotFound() *ProjectsFilesPartialUpdateNotFound {
	return &ProjectsFilesPartialUpdateNotFound{}
}

/*ProjectsFilesPartialUpdateNotFound handles this case with default header values.

File not found
*/
type ProjectsFilesPartialUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *ProjectsFilesPartialUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v0/{namespace}/projects/{project_pk}/files/{id}/][%d] projectsFilesPartialUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsFilesPartialUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProjectsFilesPartialUpdateBadRequestBody projects files partial update bad request body
swagger:model ProjectsFilesPartialUpdateBadRequestBody
*/
type ProjectsFilesPartialUpdateBadRequestBody struct {

	// author field errors
	// Required: true
	Author []string `json:"author"`

	// content field errors
	// Required: true
	Content []string `json:"content"`

	// encoding field errors
	// Required: true
	Encoding []string `json:"encoding"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// path field errors
	// Required: true
	Path []string `json:"path"`

	// project field errors
	// Required: true
	Project []string `json:"project"`

	// public field errors
	// Required: true
	Public []string `json:"public"`

	// size field errors
	// Required: true
	Size []string `json:"size"`
}

// Validate validates this projects files partial update bad request body
func (o *ProjectsFilesPartialUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateContent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateEncoding(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePublic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"author", "body", o.Author); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateEncoding(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"encoding", "body", o.Encoding); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"public", "body", o.Public); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsFilesPartialUpdateBadRequestBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("projectsFilesPartialUpdateBadRequest"+"."+"size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

/*ProjectsFilesPartialUpdateBody projects files partial update body
swagger:model ProjectsFilesPartialUpdateBody
*/
type ProjectsFilesPartialUpdateBody struct {

	// author
	Author string `json:"author,omitempty"`

	// content
	Content string `json:"content,omitempty"`

	// encoding
	Encoding string `json:"encoding,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// public
	Public bool `json:"public,omitempty"`
}
