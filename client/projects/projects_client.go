package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectsCollaboratorsCreate projects collaborators create API
*/
func (a *Client) ProjectsCollaboratorsCreate(params *ProjectsCollaboratorsCreateParams) (*ProjectsCollaboratorsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsCreateCreated), nil

}

/*
ProjectsCollaboratorsDelete projects collaborators delete API
*/
func (a *Client) ProjectsCollaboratorsDelete(params *ProjectsCollaboratorsDeleteParams) (*ProjectsCollaboratorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsDeleteNoContent), nil

}

/*
ProjectsCollaboratorsList projects collaborators list API
*/
func (a *Client) ProjectsCollaboratorsList(params *ProjectsCollaboratorsListParams) (*ProjectsCollaboratorsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsListOK), nil

}

/*
ProjectsCollaboratorsPartialUpdate projects collaborators partial update API
*/
func (a *Client) ProjectsCollaboratorsPartialUpdate(params *ProjectsCollaboratorsPartialUpdateParams) (*ProjectsCollaboratorsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsPartialUpdateOK), nil

}

/*
ProjectsCollaboratorsRead projects collaborators read API
*/
func (a *Client) ProjectsCollaboratorsRead(params *ProjectsCollaboratorsReadParams) (*ProjectsCollaboratorsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsReadOK), nil

}

/*
ProjectsCollaboratorsUpdate projects collaborators update API
*/
func (a *Client) ProjectsCollaboratorsUpdate(params *ProjectsCollaboratorsUpdateParams) (*ProjectsCollaboratorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsUpdateOK), nil

}

/*
ProjectsCreate projects create API
*/
func (a *Client) ProjectsCreate(params *ProjectsCreateParams) (*ProjectsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCreateCreated), nil

}

/*
ProjectsDataSourcesCreate projects data sources create API
*/
func (a *Client) ProjectsDataSourcesCreate(params *ProjectsDataSourcesCreateParams) (*ProjectsDataSourcesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesCreateCreated), nil

}

/*
ProjectsDataSourcesDelete projects data sources delete API
*/
func (a *Client) ProjectsDataSourcesDelete(params *ProjectsDataSourcesDeleteParams) (*ProjectsDataSourcesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesDeleteNoContent), nil

}

/*
ProjectsDataSourcesList projects data sources list API
*/
func (a *Client) ProjectsDataSourcesList(params *ProjectsDataSourcesListParams) (*ProjectsDataSourcesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesListOK), nil

}

/*
ProjectsDataSourcesPartialUpdate projects data sources partial update API
*/
func (a *Client) ProjectsDataSourcesPartialUpdate(params *ProjectsDataSourcesPartialUpdateParams) (*ProjectsDataSourcesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesPartialUpdateOK), nil

}

/*
ProjectsDataSourcesRead projects data sources read API
*/
func (a *Client) ProjectsDataSourcesRead(params *ProjectsDataSourcesReadParams) (*ProjectsDataSourcesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesReadOK), nil

}

/*
ProjectsDataSourcesStart projects data sources start API
*/
func (a *Client) ProjectsDataSourcesStart(params *ProjectsDataSourcesStartParams) (*ProjectsDataSourcesStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_start",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/start/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesStartCreated), nil

}

/*
ProjectsDataSourcesStop projects data sources stop API
*/
func (a *Client) ProjectsDataSourcesStop(params *ProjectsDataSourcesStopParams) (*ProjectsDataSourcesStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_stop",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/stop/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesStopCreated), nil

}

/*
ProjectsDataSourcesTerminate projects data sources terminate API
*/
func (a *Client) ProjectsDataSourcesTerminate(params *ProjectsDataSourcesTerminateParams) (*ProjectsDataSourcesTerminateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_terminate",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/terminate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesTerminateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesTerminateCreated), nil

}

/*
ProjectsDataSourcesUpdate projects data sources update API
*/
func (a *Client) ProjectsDataSourcesUpdate(params *ProjectsDataSourcesUpdateParams) (*ProjectsDataSourcesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDataSourcesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_data-sources_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/data-sources/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDataSourcesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDataSourcesUpdateOK), nil

}

/*
ProjectsDelete projects delete API
*/
func (a *Client) ProjectsDelete(params *ProjectsDeleteParams) (*ProjectsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDeleteNoContent), nil

}

/*
ProjectsFilesCreate projects files create API
*/
func (a *Client) ProjectsFilesCreate(params *ProjectsFilesCreateParams) (*ProjectsFilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesCreateCreated), nil

}

/*
ProjectsFilesDelete projects files delete API
*/
func (a *Client) ProjectsFilesDelete(params *ProjectsFilesDeleteParams) (*ProjectsFilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesDeleteNoContent), nil

}

/*
ProjectsFilesList projects files list API
*/
func (a *Client) ProjectsFilesList(params *ProjectsFilesListParams) (*ProjectsFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesListOK), nil

}

/*
ProjectsFilesPartialUpdate projects files partial update API
*/
func (a *Client) ProjectsFilesPartialUpdate(params *ProjectsFilesPartialUpdateParams) (*ProjectsFilesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesPartialUpdateOK), nil

}

/*
ProjectsFilesRead projects files read API
*/
func (a *Client) ProjectsFilesRead(params *ProjectsFilesReadParams) (*ProjectsFilesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesReadOK), nil

}

/*
ProjectsFilesUpdate projects files update API
*/
func (a *Client) ProjectsFilesUpdate(params *ProjectsFilesUpdateParams) (*ProjectsFilesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesUpdateOK), nil

}

/*
ProjectsJobsCreate projects jobs create API
*/
func (a *Client) ProjectsJobsCreate(params *ProjectsJobsCreateParams) (*ProjectsJobsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsCreateCreated), nil

}

/*
ProjectsJobsDelete projects jobs delete API
*/
func (a *Client) ProjectsJobsDelete(params *ProjectsJobsDeleteParams) (*ProjectsJobsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsDeleteNoContent), nil

}

/*
ProjectsJobsList projects jobs list API
*/
func (a *Client) ProjectsJobsList(params *ProjectsJobsListParams) (*ProjectsJobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsListOK), nil

}

/*
ProjectsJobsPartialUpdate projects jobs partial update API
*/
func (a *Client) ProjectsJobsPartialUpdate(params *ProjectsJobsPartialUpdateParams) (*ProjectsJobsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsPartialUpdateOK), nil

}

/*
ProjectsJobsRead projects jobs read API
*/
func (a *Client) ProjectsJobsRead(params *ProjectsJobsReadParams) (*ProjectsJobsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsReadOK), nil

}

/*
ProjectsJobsStart projects jobs start API
*/
func (a *Client) ProjectsJobsStart(params *ProjectsJobsStartParams) (*ProjectsJobsStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_start",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/start/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsStartCreated), nil

}

/*
ProjectsJobsStop projects jobs stop API
*/
func (a *Client) ProjectsJobsStop(params *ProjectsJobsStopParams) (*ProjectsJobsStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_stop",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/stop/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsStopCreated), nil

}

/*
ProjectsJobsTerminate projects jobs terminate API
*/
func (a *Client) ProjectsJobsTerminate(params *ProjectsJobsTerminateParams) (*ProjectsJobsTerminateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_terminate",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/terminate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsTerminateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsTerminateCreated), nil

}

/*
ProjectsJobsUpdate projects jobs update API
*/
func (a *Client) ProjectsJobsUpdate(params *ProjectsJobsUpdateParams) (*ProjectsJobsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsJobsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_jobs_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/jobs/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsJobsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsJobsUpdateOK), nil

}

/*
ProjectsList projects list API
*/
func (a *Client) ProjectsList(params *ProjectsListParams) (*ProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsListOK), nil

}

/*
ProjectsModelsCreate projects models create API
*/
func (a *Client) ProjectsModelsCreate(params *ProjectsModelsCreateParams) (*ProjectsModelsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsCreateCreated), nil

}

/*
ProjectsModelsDelete projects models delete API
*/
func (a *Client) ProjectsModelsDelete(params *ProjectsModelsDeleteParams) (*ProjectsModelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsDeleteNoContent), nil

}

/*
ProjectsModelsList projects models list API
*/
func (a *Client) ProjectsModelsList(params *ProjectsModelsListParams) (*ProjectsModelsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsListOK), nil

}

/*
ProjectsModelsPartialUpdate projects models partial update API
*/
func (a *Client) ProjectsModelsPartialUpdate(params *ProjectsModelsPartialUpdateParams) (*ProjectsModelsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsPartialUpdateOK), nil

}

/*
ProjectsModelsRead projects models read API
*/
func (a *Client) ProjectsModelsRead(params *ProjectsModelsReadParams) (*ProjectsModelsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsReadOK), nil

}

/*
ProjectsModelsStart projects models start API
*/
func (a *Client) ProjectsModelsStart(params *ProjectsModelsStartParams) (*ProjectsModelsStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_start",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/start/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsStartCreated), nil

}

/*
ProjectsModelsStop projects models stop API
*/
func (a *Client) ProjectsModelsStop(params *ProjectsModelsStopParams) (*ProjectsModelsStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_stop",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/stop/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsStopCreated), nil

}

/*
ProjectsModelsTerminate projects models terminate API
*/
func (a *Client) ProjectsModelsTerminate(params *ProjectsModelsTerminateParams) (*ProjectsModelsTerminateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_terminate",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/terminate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsTerminateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsTerminateCreated), nil

}

/*
ProjectsModelsUpdate projects models update API
*/
func (a *Client) ProjectsModelsUpdate(params *ProjectsModelsUpdateParams) (*ProjectsModelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsModelsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_models_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/models/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsModelsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsModelsUpdateOK), nil

}

/*
ProjectsPartialUpdate projects partial update API
*/
func (a *Client) ProjectsPartialUpdate(params *ProjectsPartialUpdateParams) (*ProjectsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsPartialUpdateOK), nil

}

/*
ProjectsRead projects read API
*/
func (a *Client) ProjectsRead(params *ProjectsReadParams) (*ProjectsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsReadOK), nil

}

/*
ProjectsRunStatsCreate projects run stats create API
*/
func (a *Client) ProjectsRunStatsCreate(params *ProjectsRunStatsCreateParams) (*ProjectsRunStatsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsCreateCreated), nil

}

/*
ProjectsRunStatsDelete projects run stats delete API
*/
func (a *Client) ProjectsRunStatsDelete(params *ProjectsRunStatsDeleteParams) (*ProjectsRunStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsDeleteNoContent), nil

}

/*
ProjectsRunStatsList projects run stats list API
*/
func (a *Client) ProjectsRunStatsList(params *ProjectsRunStatsListParams) (*ProjectsRunStatsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsListOK), nil

}

/*
ProjectsRunStatsPartialUpdate projects run stats partial update API
*/
func (a *Client) ProjectsRunStatsPartialUpdate(params *ProjectsRunStatsPartialUpdateParams) (*ProjectsRunStatsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsPartialUpdateOK), nil

}

/*
ProjectsRunStatsRead projects run stats read API
*/
func (a *Client) ProjectsRunStatsRead(params *ProjectsRunStatsReadParams) (*ProjectsRunStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsReadOK), nil

}

/*
ProjectsRunStatsUpdate projects run stats update API
*/
func (a *Client) ProjectsRunStatsUpdate(params *ProjectsRunStatsUpdateParams) (*ProjectsRunStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsRunStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_run-stats_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsRunStatsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsRunStatsUpdateOK), nil

}

/*
ProjectsSSHTunnelsCreate projects ssh tunnels create API
*/
func (a *Client) ProjectsSSHTunnelsCreate(params *ProjectsSSHTunnelsCreateParams) (*ProjectsSSHTunnelsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsCreateCreated), nil

}

/*
ProjectsSSHTunnelsDelete projects ssh tunnels delete API
*/
func (a *Client) ProjectsSSHTunnelsDelete(params *ProjectsSSHTunnelsDeleteParams) (*ProjectsSSHTunnelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsDeleteNoContent), nil

}

/*
ProjectsSSHTunnelsList projects ssh tunnels list API
*/
func (a *Client) ProjectsSSHTunnelsList(params *ProjectsSSHTunnelsListParams) (*ProjectsSSHTunnelsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsListOK), nil

}

/*
ProjectsSSHTunnelsPartialUpdate projects ssh tunnels partial update API
*/
func (a *Client) ProjectsSSHTunnelsPartialUpdate(params *ProjectsSSHTunnelsPartialUpdateParams) (*ProjectsSSHTunnelsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsPartialUpdateOK), nil

}

/*
ProjectsSSHTunnelsRead projects ssh tunnels read API
*/
func (a *Client) ProjectsSSHTunnelsRead(params *ProjectsSSHTunnelsReadParams) (*ProjectsSSHTunnelsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsReadOK), nil

}

/*
ProjectsSSHTunnelsUpdate projects ssh tunnels update API
*/
func (a *Client) ProjectsSSHTunnelsUpdate(params *ProjectsSSHTunnelsUpdateParams) (*ProjectsSSHTunnelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsSSHTunnelsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_ssh-tunnels_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsSSHTunnelsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsSSHTunnelsUpdateOK), nil

}

/*
ProjectsStatsCreate projects stats create API
*/
func (a *Client) ProjectsStatsCreate(params *ProjectsStatsCreateParams) (*ProjectsStatsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsCreateCreated), nil

}

/*
ProjectsStatsDelete projects stats delete API
*/
func (a *Client) ProjectsStatsDelete(params *ProjectsStatsDeleteParams) (*ProjectsStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsDeleteNoContent), nil

}

/*
ProjectsStatsList projects stats list API
*/
func (a *Client) ProjectsStatsList(params *ProjectsStatsListParams) (*ProjectsStatsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsListOK), nil

}

/*
ProjectsStatsPartialUpdate projects stats partial update API
*/
func (a *Client) ProjectsStatsPartialUpdate(params *ProjectsStatsPartialUpdateParams) (*ProjectsStatsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsPartialUpdateOK), nil

}

/*
ProjectsStatsRead projects stats read API
*/
func (a *Client) ProjectsStatsRead(params *ProjectsStatsReadParams) (*ProjectsStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsReadOK), nil

}

/*
ProjectsStatsUpdate projects stats update API
*/
func (a *Client) ProjectsStatsUpdate(params *ProjectsStatsUpdateParams) (*ProjectsStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_stats_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/{server_type}/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsStatsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsStatsUpdateOK), nil

}

/*
ProjectsUpdate projects update API
*/
func (a *Client) ProjectsUpdate(params *ProjectsUpdateParams) (*ProjectsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsUpdateOK), nil

}

/*
ProjectsWorkspacesCreate projects workspaces create API
*/
func (a *Client) ProjectsWorkspacesCreate(params *ProjectsWorkspacesCreateParams) (*ProjectsWorkspacesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesCreateCreated), nil

}

/*
ProjectsWorkspacesDelete projects workspaces delete API
*/
func (a *Client) ProjectsWorkspacesDelete(params *ProjectsWorkspacesDeleteParams) (*ProjectsWorkspacesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesDeleteNoContent), nil

}

/*
ProjectsWorkspacesList projects workspaces list API
*/
func (a *Client) ProjectsWorkspacesList(params *ProjectsWorkspacesListParams) (*ProjectsWorkspacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesListOK), nil

}

/*
ProjectsWorkspacesPartialUpdate projects workspaces partial update API
*/
func (a *Client) ProjectsWorkspacesPartialUpdate(params *ProjectsWorkspacesPartialUpdateParams) (*ProjectsWorkspacesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesPartialUpdateOK), nil

}

/*
ProjectsWorkspacesRead projects workspaces read API
*/
func (a *Client) ProjectsWorkspacesRead(params *ProjectsWorkspacesReadParams) (*ProjectsWorkspacesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesReadOK), nil

}

/*
ProjectsWorkspacesStart projects workspaces start API
*/
func (a *Client) ProjectsWorkspacesStart(params *ProjectsWorkspacesStartParams) (*ProjectsWorkspacesStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_start",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/start/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesStartCreated), nil

}

/*
ProjectsWorkspacesStop projects workspaces stop API
*/
func (a *Client) ProjectsWorkspacesStop(params *ProjectsWorkspacesStopParams) (*ProjectsWorkspacesStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_stop",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/stop/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesStopCreated), nil

}

/*
ProjectsWorkspacesTerminate projects workspaces terminate API
*/
func (a *Client) ProjectsWorkspacesTerminate(params *ProjectsWorkspacesTerminateParams) (*ProjectsWorkspacesTerminateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_terminate",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/terminate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesTerminateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesTerminateCreated), nil

}

/*
ProjectsWorkspacesUpdate projects workspaces update API
*/
func (a *Client) ProjectsWorkspacesUpdate(params *ProjectsWorkspacesUpdateParams) (*ProjectsWorkspacesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsWorkspacesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_workspaces_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/workspaces/{server}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsWorkspacesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsWorkspacesUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
