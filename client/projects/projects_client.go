package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectsCollaboratorsCreate projects collaborators create API
*/
func (a *Client) ProjectsCollaboratorsCreate(params *ProjectsCollaboratorsCreateParams) (*ProjectsCollaboratorsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsCreateCreated), nil

}

/*
ProjectsCollaboratorsDelete projects collaborators delete API
*/
func (a *Client) ProjectsCollaboratorsDelete(params *ProjectsCollaboratorsDeleteParams) (*ProjectsCollaboratorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsDeleteNoContent), nil

}

/*
ProjectsCollaboratorsList projects collaborators list API
*/
func (a *Client) ProjectsCollaboratorsList(params *ProjectsCollaboratorsListParams) (*ProjectsCollaboratorsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsListOK), nil

}

/*
ProjectsCollaboratorsPartialUpdate projects collaborators partial update API
*/
func (a *Client) ProjectsCollaboratorsPartialUpdate(params *ProjectsCollaboratorsPartialUpdateParams) (*ProjectsCollaboratorsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsPartialUpdateOK), nil

}

/*
ProjectsCollaboratorsRead projects collaborators read API
*/
func (a *Client) ProjectsCollaboratorsRead(params *ProjectsCollaboratorsReadParams) (*ProjectsCollaboratorsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsReadOK), nil

}

/*
ProjectsCollaboratorsUpdate projects collaborators update API
*/
func (a *Client) ProjectsCollaboratorsUpdate(params *ProjectsCollaboratorsUpdateParams) (*ProjectsCollaboratorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/collaborators/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsUpdateOK), nil

}

/*
ProjectsCreate projects create API
*/
func (a *Client) ProjectsCreate(params *ProjectsCreateParams) (*ProjectsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCreateCreated), nil

}

/*
ProjectsDelete projects delete API
*/
func (a *Client) ProjectsDelete(params *ProjectsDeleteParams) (*ProjectsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDeleteNoContent), nil

}

/*
ProjectsFilesCreate projects files create API
*/
func (a *Client) ProjectsFilesCreate(params *ProjectsFilesCreateParams) (*ProjectsFilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesCreateCreated), nil

}

/*
ProjectsFilesDelete projects files delete API
*/
func (a *Client) ProjectsFilesDelete(params *ProjectsFilesDeleteParams) (*ProjectsFilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesDeleteNoContent), nil

}

/*
ProjectsFilesList projects files list API
*/
func (a *Client) ProjectsFilesList(params *ProjectsFilesListParams) (*ProjectsFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesListOK), nil

}

/*
ProjectsFilesPartialUpdate projects files partial update API
*/
func (a *Client) ProjectsFilesPartialUpdate(params *ProjectsFilesPartialUpdateParams) (*ProjectsFilesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesPartialUpdateOK), nil

}

/*
ProjectsFilesRead projects files read API
*/
func (a *Client) ProjectsFilesRead(params *ProjectsFilesReadParams) (*ProjectsFilesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesReadOK), nil

}

/*
ProjectsFilesUpdate projects files update API
*/
func (a *Client) ProjectsFilesUpdate(params *ProjectsFilesUpdateParams) (*ProjectsFilesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsFilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_files_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/files/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsFilesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsFilesUpdateOK), nil

}

/*
ProjectsList projects list API
*/
func (a *Client) ProjectsList(params *ProjectsListParams) (*ProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsListOK), nil

}

/*
ProjectsPartialUpdate projects partial update API
*/
func (a *Client) ProjectsPartialUpdate(params *ProjectsPartialUpdateParams) (*ProjectsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsPartialUpdateOK), nil

}

/*
ProjectsRead projects read API
*/
func (a *Client) ProjectsRead(params *ProjectsReadParams) (*ProjectsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsReadOK), nil

}

/*
ProjectsServersCreate projects servers create API
*/
func (a *Client) ProjectsServersCreate(params *ProjectsServersCreateParams) (*ProjectsServersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersCreateCreated), nil

}

/*
ProjectsServersDelete projects servers delete API
*/
func (a *Client) ProjectsServersDelete(params *ProjectsServersDeleteParams) (*ProjectsServersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersDeleteNoContent), nil

}

/*
ProjectsServersIsAllowedList checks if user is allowed to access model server

Checks if user is allowed to access model server
*/
func (a *Client) ProjectsServersIsAllowedList(params *ProjectsServersIsAllowedListParams) (*ProjectsServersIsAllowedListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersIsAllowedListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_is-allowed_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/is-allowed/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersIsAllowedListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersIsAllowedListOK), nil

}

/*
ProjectsServersList projects servers list API
*/
func (a *Client) ProjectsServersList(params *ProjectsServersListParams) (*ProjectsServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersListOK), nil

}

/*
ProjectsServersPartialUpdate projects servers partial update API
*/
func (a *Client) ProjectsServersPartialUpdate(params *ProjectsServersPartialUpdateParams) (*ProjectsServersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersPartialUpdateOK), nil

}

/*
ProjectsServersRead projects servers read API
*/
func (a *Client) ProjectsServersRead(params *ProjectsServersReadParams) (*ProjectsServersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersReadOK), nil

}

/*
ProjectsServersRunStatsCreate projects servers run stats create API
*/
func (a *Client) ProjectsServersRunStatsCreate(params *ProjectsServersRunStatsCreateParams) (*ProjectsServersRunStatsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsCreateCreated), nil

}

/*
ProjectsServersRunStatsDelete projects servers run stats delete API
*/
func (a *Client) ProjectsServersRunStatsDelete(params *ProjectsServersRunStatsDeleteParams) (*ProjectsServersRunStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsDeleteNoContent), nil

}

/*
ProjectsServersRunStatsList projects servers run stats list API
*/
func (a *Client) ProjectsServersRunStatsList(params *ProjectsServersRunStatsListParams) (*ProjectsServersRunStatsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsListOK), nil

}

/*
ProjectsServersRunStatsPartialUpdate projects servers run stats partial update API
*/
func (a *Client) ProjectsServersRunStatsPartialUpdate(params *ProjectsServersRunStatsPartialUpdateParams) (*ProjectsServersRunStatsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsPartialUpdateOK), nil

}

/*
ProjectsServersRunStatsRead projects servers run stats read API
*/
func (a *Client) ProjectsServersRunStatsRead(params *ProjectsServersRunStatsReadParams) (*ProjectsServersRunStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsReadOK), nil

}

/*
ProjectsServersRunStatsUpdate projects servers run stats update API
*/
func (a *Client) ProjectsServersRunStatsUpdate(params *ProjectsServersRunStatsUpdateParams) (*ProjectsServersRunStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsUpdateOK), nil

}

/*
ProjectsServersSSHTunnelsCreate projects servers ssh tunnels create API
*/
func (a *Client) ProjectsServersSSHTunnelsCreate(params *ProjectsServersSSHTunnelsCreateParams) (*ProjectsServersSSHTunnelsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsCreateCreated), nil

}

/*
ProjectsServersSSHTunnelsDelete projects servers ssh tunnels delete API
*/
func (a *Client) ProjectsServersSSHTunnelsDelete(params *ProjectsServersSSHTunnelsDeleteParams) (*ProjectsServersSSHTunnelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsDeleteNoContent), nil

}

/*
ProjectsServersSSHTunnelsList projects servers ssh tunnels list API
*/
func (a *Client) ProjectsServersSSHTunnelsList(params *ProjectsServersSSHTunnelsListParams) (*ProjectsServersSSHTunnelsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsListOK), nil

}

/*
ProjectsServersSSHTunnelsPartialUpdate projects servers ssh tunnels partial update API
*/
func (a *Client) ProjectsServersSSHTunnelsPartialUpdate(params *ProjectsServersSSHTunnelsPartialUpdateParams) (*ProjectsServersSSHTunnelsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsPartialUpdateOK), nil

}

/*
ProjectsServersSSHTunnelsRead projects servers ssh tunnels read API
*/
func (a *Client) ProjectsServersSSHTunnelsRead(params *ProjectsServersSSHTunnelsReadParams) (*ProjectsServersSSHTunnelsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsReadOK), nil

}

/*
ProjectsServersSSHTunnelsUpdate projects servers ssh tunnels update API
*/
func (a *Client) ProjectsServersSSHTunnelsUpdate(params *ProjectsServersSSHTunnelsUpdateParams) (*ProjectsServersSSHTunnelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/ssh-tunnels/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsUpdateOK), nil

}

/*
ProjectsServersStart projects servers start API
*/
func (a *Client) ProjectsServersStart(params *ProjectsServersStartParams) (*ProjectsServersStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_start",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/start/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStartCreated), nil

}

/*
ProjectsServersStatsCreate projects servers stats create API
*/
func (a *Client) ProjectsServersStatsCreate(params *ProjectsServersStatsCreateParams) (*ProjectsServersStatsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_create",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsCreateCreated), nil

}

/*
ProjectsServersStatsDelete projects servers stats delete API
*/
func (a *Client) ProjectsServersStatsDelete(params *ProjectsServersStatsDeleteParams) (*ProjectsServersStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_delete",
		Method:             "DELETE",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsDeleteNoContent), nil

}

/*
ProjectsServersStatsList projects servers stats list API
*/
func (a *Client) ProjectsServersStatsList(params *ProjectsServersStatsListParams) (*ProjectsServersStatsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_list",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsListOK), nil

}

/*
ProjectsServersStatsPartialUpdate projects servers stats partial update API
*/
func (a *Client) ProjectsServersStatsPartialUpdate(params *ProjectsServersStatsPartialUpdateParams) (*ProjectsServersStatsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsPartialUpdateOK), nil

}

/*
ProjectsServersStatsRead projects servers stats read API
*/
func (a *Client) ProjectsServersStatsRead(params *ProjectsServersStatsReadParams) (*ProjectsServersStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_read",
		Method:             "GET",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsReadOK), nil

}

/*
ProjectsServersStatsUpdate projects servers stats update API
*/
func (a *Client) ProjectsServersStatsUpdate(params *ProjectsServersStatsUpdateParams) (*ProjectsServersStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{server_pk}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStatsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsUpdateOK), nil

}

/*
ProjectsServersStop projects servers stop API
*/
func (a *Client) ProjectsServersStop(params *ProjectsServersStopParams) (*ProjectsServersStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stop",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/stop/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStopCreated), nil

}

/*
ProjectsServersTerminate projects servers terminate API
*/
func (a *Client) ProjectsServersTerminate(params *ProjectsServersTerminateParams) (*ProjectsServersTerminateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersTerminateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_terminate",
		Method:             "POST",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/terminate/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersTerminateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersTerminateCreated), nil

}

/*
ProjectsServersUpdate projects servers update API
*/
func (a *Client) ProjectsServersUpdate(params *ProjectsServersUpdateParams) (*ProjectsServersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{project_pk}/servers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsServersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersUpdateOK), nil

}

/*
ProjectsUpdate projects update API
*/
func (a *Client) ProjectsUpdate(params *ProjectsUpdateParams) (*ProjectsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_update",
		Method:             "PUT",
		PathPattern:        "/api/v0/{namespace}/projects/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProjectsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
