// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ProjectsCollaboratorsCreate creates project collaborators
*/
func (a *Client) ProjectsCollaboratorsCreate(params *ProjectsCollaboratorsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCollaboratorsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/collaborators/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsCreateCreated), nil

}

/*
ProjectsCollaboratorsDelete deletes a project collaborator
*/
func (a *Client) ProjectsCollaboratorsDelete(params *ProjectsCollaboratorsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCollaboratorsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsDeleteNoContent), nil

}

/*
ProjectsCollaboratorsList gets project collaborators
*/
func (a *Client) ProjectsCollaboratorsList(params *ProjectsCollaboratorsListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCollaboratorsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/collaborators/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsListOK), nil

}

/*
ProjectsCollaboratorsRead gets a project collaborator
*/
func (a *Client) ProjectsCollaboratorsRead(params *ProjectsCollaboratorsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCollaboratorsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsReadOK), nil

}

/*
ProjectsCollaboratorsUpdate updates project collaborator
*/
func (a *Client) ProjectsCollaboratorsUpdate(params *ProjectsCollaboratorsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCollaboratorsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCollaboratorsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_collaborators_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/collaborators/{collaborator}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCollaboratorsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCollaboratorsUpdateOK), nil

}

/*
ProjectsCreate creates a new project
*/
func (a *Client) ProjectsCreate(params *ProjectsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsCreateCreated), nil

}

/*
ProjectsDelete deletes a project
*/
func (a *Client) ProjectsDelete(params *ProjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsDeleteNoContent), nil

}

/*
ProjectsList gets available projects
*/
func (a *Client) ProjectsList(params *ProjectsListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsListOK), nil

}

/*
ProjectsProjectFilesCreate creates project files
*/
func (a *Client) ProjectsProjectFilesCreate(params *ProjectsProjectFilesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesCreateCreated), nil

}

/*
ProjectsProjectFilesDelete deletes a project file
*/
func (a *Client) ProjectsProjectFilesDelete(params *ProjectsProjectFilesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesDeleteNoContent), nil

}

/*
ProjectsProjectFilesList gets project files
*/
func (a *Client) ProjectsProjectFilesList(params *ProjectsProjectFilesListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesListOK), nil

}

/*
ProjectsProjectFilesRead gets a project file
*/
func (a *Client) ProjectsProjectFilesRead(params *ProjectsProjectFilesReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesReadOK), nil

}

/*
ProjectsProjectFilesReplace replaces a project file
*/
func (a *Client) ProjectsProjectFilesReplace(params *ProjectsProjectFilesReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesReplaceOK), nil

}

/*
ProjectsProjectFilesUpdate updates a project file
*/
func (a *Client) ProjectsProjectFilesUpdate(params *ProjectsProjectFilesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsProjectFilesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsProjectFilesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_project_files_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/project_files/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsProjectFilesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsProjectFilesUpdateOK), nil

}

/*
ProjectsRead gets a project
*/
func (a *Client) ProjectsRead(params *ProjectsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsReadOK), nil

}

/*
ProjectsReplace replaces a project
*/
func (a *Client) ProjectsReplace(params *ProjectsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsReplaceOK), nil

}

/*
ProjectsServersAPIKey gets server API key
*/
func (a *Client) ProjectsServersAPIKey(params *ProjectsServersAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_api-key",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/api-key/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersAPIKeyOK), nil

}

/*
ProjectsServersAuth servers api key validation
*/
func (a *Client) ProjectsServersAuth(params *ProjectsServersAuthParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_auth",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/auth/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersAuthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersAuthOK), nil

}

/*
ProjectsServersCreate creates a new server
*/
func (a *Client) ProjectsServersCreate(params *ProjectsServersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersCreateCreated), nil

}

/*
ProjectsServersDelete deletes a server
*/
func (a *Client) ProjectsServersDelete(params *ProjectsServersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersDeleteNoContent), nil

}

/*
ProjectsServersList retrieves servers
*/
func (a *Client) ProjectsServersList(params *ProjectsServersListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersListOK), nil

}

/*
ProjectsServersRead retrieves a server
*/
func (a *Client) ProjectsServersRead(params *ProjectsServersReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersReadOK), nil

}

/*
ProjectsServersReplace replaces a server
*/
func (a *Client) ProjectsServersReplace(params *ProjectsServersReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersReplaceOK), nil

}

/*
ProjectsServersRunStatsCreate creates a new server s run statistics
*/
func (a *Client) ProjectsServersRunStatsCreate(params *ProjectsServersRunStatsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersRunStatsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsCreateCreated), nil

}

/*
ProjectsServersRunStatsDelete deletes a server s statistics
*/
func (a *Client) ProjectsServersRunStatsDelete(params *ProjectsServersRunStatsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersRunStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsDeleteNoContent), nil

}

/*
ProjectsServersRunStatsRead retrieves statistics for a server
*/
func (a *Client) ProjectsServersRunStatsRead(params *ProjectsServersRunStatsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersRunStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsReadOK), nil

}

/*
ProjectsServersRunStatsReplace replaces a server s statistics
*/
func (a *Client) ProjectsServersRunStatsReplace(params *ProjectsServersRunStatsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersRunStatsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsReplaceOK), nil

}

/*
ProjectsServersRunStatsUpdate updates a server s statistics
*/
func (a *Client) ProjectsServersRunStatsUpdate(params *ProjectsServersRunStatsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersRunStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersRunStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_run-stats_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersRunStatsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersRunStatsUpdateOK), nil

}

/*
ProjectsServersSSHTunnelsCreate creates SSH tunnel associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsCreate(params *ProjectsServersSSHTunnelsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsCreateCreated), nil

}

/*
ProjectsServersSSHTunnelsDelete deletes an SSH tunnel associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsDelete(params *ProjectsServersSSHTunnelsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsDeleteNoContent), nil

}

/*
ProjectsServersSSHTunnelsList gets SSH tunnels associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsList(params *ProjectsServersSSHTunnelsListParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsListOK), nil

}

/*
ProjectsServersSSHTunnelsRead gets an SSH tunnel associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsRead(params *ProjectsServersSSHTunnelsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsReadOK), nil

}

/*
ProjectsServersSSHTunnelsReplace replaces SSH tunnel associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsReplace(params *ProjectsServersSSHTunnelsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsReplaceOK), nil

}

/*
ProjectsServersSSHTunnelsUpdate updates an SSH tunnel associated to a server
*/
func (a *Client) ProjectsServersSSHTunnelsUpdate(params *ProjectsServersSSHTunnelsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersSSHTunnelsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersSSHTunnelsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_ssh-tunnels_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersSSHTunnelsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersSSHTunnelsUpdateOK), nil

}

/*
ProjectsServersStart starts a server
*/
func (a *Client) ProjectsServersStart(params *ProjectsServersStartParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStartCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_start",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/start/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStartReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStartCreated), nil

}

/*
ProjectsServersStatsDelete deletes a server s statistics
*/
func (a *Client) ProjectsServersStatsDelete(params *ProjectsServersStatsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStatsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStatsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsDeleteNoContent), nil

}

/*
ProjectsServersStatsRead retrieves a server s statistics
*/
func (a *Client) ProjectsServersStatsRead(params *ProjectsServersStatsReadParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStatsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStatsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsReadOK), nil

}

/*
ProjectsServersStatsReplace replaces a server s statistics
*/
func (a *Client) ProjectsServersStatsReplace(params *ProjectsServersStatsReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStatsReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStatsReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsReplaceOK), nil

}

/*
ProjectsServersStatsUpdate updates a server s statistics
*/
func (a *Client) ProjectsServersStatsUpdate(params *ProjectsServersStatsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStatsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStatsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stats_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStatsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStatsUpdateOK), nil

}

/*
ProjectsServersStop stops a server
*/
func (a *Client) ProjectsServersStop(params *ProjectsServersStopParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersStopCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_stop",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/stop/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersStopCreated), nil

}

/*
ProjectsServersUpdate updates a server
*/
func (a *Client) ProjectsServersUpdate(params *ProjectsServersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsServersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsServersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_servers_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsServersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsServersUpdateOK), nil

}

/*
ProjectsUpdate updates a project
*/
func (a *Client) ProjectsUpdate(params *ProjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "projects_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProjectsUpdateOK), nil

}

/*
ServiceTriggerCreate creates a new server trigger
*/
func (a *Client) ServiceTriggerCreate(params *ServiceTriggerCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerCreateCreated), nil

}

/*
ServiceTriggerDelete deletes a server trigger
*/
func (a *Client) ServiceTriggerDelete(params *ServiceTriggerDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerDeleteNoContent), nil

}

/*
ServiceTriggerList retrieves server triggers
*/
func (a *Client) ServiceTriggerList(params *ServiceTriggerListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerListOK), nil

}

/*
ServiceTriggerRead gets a server trigger
*/
func (a *Client) ServiceTriggerRead(params *ServiceTriggerReadParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerReadOK), nil

}

/*
ServiceTriggerReplace replaces a server trigger
*/
func (a *Client) ServiceTriggerReplace(params *ServiceTriggerReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerReplaceOK), nil

}

/*
ServiceTriggerUpdate updates a server trigger
*/
func (a *Client) ServiceTriggerUpdate(params *ServiceTriggerUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
