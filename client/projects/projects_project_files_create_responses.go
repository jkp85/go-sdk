package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"os"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ProjectsProjectFilesCreateReader is a Reader for the ProjectsProjectFilesCreate structure.
type ProjectsProjectFilesCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsProjectFilesCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewProjectsProjectFilesCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewProjectsProjectFilesCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewProjectsProjectFilesCreateCreated creates a ProjectsProjectFilesCreateCreated with default headers values
func NewProjectsProjectFilesCreateCreated() *ProjectsProjectFilesCreateCreated {
	return &ProjectsProjectFilesCreateCreated{}
}

/*ProjectsProjectFilesCreateCreated handles this case with default header values.

ProjectFile created
*/
type ProjectsProjectFilesCreateCreated struct {
	Payload *models.ProjectFile
}

func (o *ProjectsProjectFilesCreateCreated) Error() string {
	return fmt.Sprintf("[POST /{namespace}/projects/{project_pk}/project_files/][%d] projectsProjectFilesCreateCreated  %+v", 201, o.Payload)
}

func (o *ProjectsProjectFilesCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectFile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsProjectFilesCreateBadRequest creates a ProjectsProjectFilesCreateBadRequest with default headers values
func NewProjectsProjectFilesCreateBadRequest() *ProjectsProjectFilesCreateBadRequest {
	return &ProjectsProjectFilesCreateBadRequest{}
}

/*ProjectsProjectFilesCreateBadRequest handles this case with default header values.

Invalid data supplied
*/
type ProjectsProjectFilesCreateBadRequest struct {
	Payload ProjectsProjectFilesCreateBadRequestBody
}

func (o *ProjectsProjectFilesCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /{namespace}/projects/{project_pk}/project_files/][%d] projectsProjectFilesCreateBadRequest  %+v", 400, o.Payload)
}

func (o *ProjectsProjectFilesCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ProjectsProjectFilesCreateBadRequestBody projects project files create bad request body
swagger:model ProjectsProjectFilesCreateBadRequestBody
*/
type ProjectsProjectFilesCreateBadRequestBody struct {

	// file field errors
	// Required: true
	File []string `json:"file"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// project field errors
	// Required: true
	Project []string `json:"project"`

	// public field errors
	// Required: true
	Public []string `json:"public"`
}

// Validate validates this projects project files create bad request body
func (o *ProjectsProjectFilesCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePublic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsProjectFilesCreateBadRequestBody) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("projectsProjectFilesCreateBadRequest"+"."+"file", "body", o.File); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsProjectFilesCreateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("projectsProjectFilesCreateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsProjectFilesCreateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("projectsProjectFilesCreateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsProjectFilesCreateBadRequestBody) validateProject(formats strfmt.Registry) error {

	if err := validate.Required("projectsProjectFilesCreateBadRequest"+"."+"project", "body", o.Project); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsProjectFilesCreateBadRequestBody) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("projectsProjectFilesCreateBadRequest"+"."+"public", "body", o.Public); err != nil {
		return err
	}

	return nil
}

type ProjectsProjectFilesCreateBody struct {

	File *os.File `json:"file"`

	Project *string `json:"project"`

	Public bool `json:"public,omitempty"`

	Name string `json:"name,omitempty"`

	Path string `json:"path,omitempty"`

	Content string `json:"content,omitempty"`

	Base64Data string `json:"content,omitempty"`
}
