// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NewProjectCopyParams creates a new ProjectCopyParams object
// with the default values initialized.
func NewProjectCopyParams() *ProjectCopyParams {
	var ()
	return &ProjectCopyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectCopyParamsWithTimeout creates a new ProjectCopyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectCopyParamsWithTimeout(timeout time.Duration) *ProjectCopyParams {
	var ()
	return &ProjectCopyParams{

		timeout: timeout,
	}
}

// NewProjectCopyParamsWithContext creates a new ProjectCopyParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectCopyParamsWithContext(ctx context.Context) *ProjectCopyParams {
	var ()
	return &ProjectCopyParams{

		Context: ctx,
	}
}

// NewProjectCopyParamsWithHTTPClient creates a new ProjectCopyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectCopyParamsWithHTTPClient(client *http.Client) *ProjectCopyParams {
	var ()
	return &ProjectCopyParams{
		HTTPClient: client,
	}
}

/*ProjectCopyParams contains all the parameters to send to the API endpoint
for the project copy operation typically these are written to a http.Request
*/
type ProjectCopyParams struct {

	/*Namespace
	  User or team name.

	*/
	Namespace string
	/*ProjectCopyData*/
	ProjectCopyData *models.ProjectCopyParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the project copy params
func (o *ProjectCopyParams) WithTimeout(timeout time.Duration) *ProjectCopyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the project copy params
func (o *ProjectCopyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the project copy params
func (o *ProjectCopyParams) WithContext(ctx context.Context) *ProjectCopyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the project copy params
func (o *ProjectCopyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the project copy params
func (o *ProjectCopyParams) WithHTTPClient(client *http.Client) *ProjectCopyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the project copy params
func (o *ProjectCopyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespace adds the namespace to the project copy params
func (o *ProjectCopyParams) WithNamespace(namespace string) *ProjectCopyParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the project copy params
func (o *ProjectCopyParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithProjectCopyData adds the projectCopyData to the project copy params
func (o *ProjectCopyParams) WithProjectCopyData(projectCopyData *models.ProjectCopyParamsBody) *ProjectCopyParams {
	o.SetProjectCopyData(projectCopyData)
	return o
}

// SetProjectCopyData adds the projectCopyData to the project copy params
func (o *ProjectCopyParams) SetProjectCopyData(projectCopyData *models.ProjectCopyParamsBody) {
	o.ProjectCopyData = projectCopyData
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectCopyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.ProjectCopyData != nil {
		if err := r.SetBodyParam(o.ProjectCopyData); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
