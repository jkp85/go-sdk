package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProjectsServersRunStatsListParams creates a new ProjectsServersRunStatsListParams object
// with the default values initialized.
func NewProjectsServersRunStatsListParams() *ProjectsServersRunStatsListParams {
	var ()
	return &ProjectsServersRunStatsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewProjectsServersRunStatsListParamsWithTimeout creates a new ProjectsServersRunStatsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewProjectsServersRunStatsListParamsWithTimeout(timeout time.Duration) *ProjectsServersRunStatsListParams {
	var ()
	return &ProjectsServersRunStatsListParams{

		timeout: timeout,
	}
}

// NewProjectsServersRunStatsListParamsWithContext creates a new ProjectsServersRunStatsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewProjectsServersRunStatsListParamsWithContext(ctx context.Context) *ProjectsServersRunStatsListParams {
	var ()
	return &ProjectsServersRunStatsListParams{

		Context: ctx,
	}
}

// NewProjectsServersRunStatsListParamsWithHTTPClient creates a new ProjectsServersRunStatsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewProjectsServersRunStatsListParamsWithHTTPClient(client *http.Client) *ProjectsServersRunStatsListParams {
	var ()
	return &ProjectsServersRunStatsListParams{
		HTTPClient: client,
	}
}

/*ProjectsServersRunStatsListParams contains all the parameters to send to the API endpoint
for the projects servers run stats list operation typically these are written to a http.Request
*/
type ProjectsServersRunStatsListParams struct {

	/*Limit*/
	Limit *string
	/*Namespace*/
	Namespace string
	/*Offset*/
	Offset *string
	/*ProjectPk*/
	ProjectPk string
	/*ServerPk*/
	ServerPk string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithTimeout(timeout time.Duration) *ProjectsServersRunStatsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithContext(ctx context.Context) *ProjectsServersRunStatsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithHTTPClient(client *http.Client) *ProjectsServersRunStatsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithLimit(limit *string) *ProjectsServersRunStatsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithNamespace(namespace string) *ProjectsServersRunStatsListParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOffset adds the offset to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithOffset(offset *string) *ProjectsServersRunStatsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithProjectPk adds the projectPk to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithProjectPk(projectPk string) *ProjectsServersRunStatsListParams {
	o.SetProjectPk(projectPk)
	return o
}

// SetProjectPk adds the projectPk to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetProjectPk(projectPk string) {
	o.ProjectPk = projectPk
}

// WithServerPk adds the serverPk to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) WithServerPk(serverPk string) *ProjectsServersRunStatsListParams {
	o.SetServerPk(serverPk)
	return o
}

// SetServerPk adds the serverPk to the projects servers run stats list params
func (o *ProjectsServersRunStatsListParams) SetServerPk(serverPk string) {
	o.ServerPk = serverPk
}

// WriteToRequest writes these params to a swagger request
func (o *ProjectsServersRunStatsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// path param project_pk
	if err := r.SetPathParam("project_pk", o.ProjectPk); err != nil {
		return err
	}

	// path param server_pk
	if err := r.SetPathParam("server_pk", o.ServerPk); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
