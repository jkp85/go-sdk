// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ServiceTriggerCall calls a trigger
*/
func (a *Client) ServiceTriggerCall(params *ServiceTriggerCallParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerCallCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_call",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/{id}/call/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerCallCreated), nil

}

/*
ServiceTriggerCreate creates a new server trigger
*/
func (a *Client) ServiceTriggerCreate(params *ServiceTriggerCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerCreateCreated), nil

}

/*
ServiceTriggerDelete deletes a server trigger
*/
func (a *Client) ServiceTriggerDelete(params *ServiceTriggerDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerDeleteNoContent), nil

}

/*
ServiceTriggerList retrieves server triggers
*/
func (a *Client) ServiceTriggerList(params *ServiceTriggerListParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerListOK), nil

}

/*
ServiceTriggerRead gets a server trigger
*/
func (a *Client) ServiceTriggerRead(params *ServiceTriggerReadParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerReadOK), nil

}

/*
ServiceTriggerReplace replaces a server trigger
*/
func (a *Client) ServiceTriggerReplace(params *ServiceTriggerReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_replace",
		Method:             "PUT",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerReplaceOK), nil

}

/*
ServiceTriggerUpdate updates a server trigger
*/
func (a *Client) ServiceTriggerUpdate(params *ServiceTriggerUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServiceTriggerUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceTriggerUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "service_trigger_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/service/{server_id}/trigger/{id}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServiceTriggerUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServiceTriggerUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
