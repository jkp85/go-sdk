package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// TriggersCreateReader is a Reader for the TriggersCreate structure.
type TriggersCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggersCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewTriggersCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTriggersCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTriggersCreateCreated creates a TriggersCreateCreated with default headers values
func NewTriggersCreateCreated() *TriggersCreateCreated {
	return &TriggersCreateCreated{}
}

/*TriggersCreateCreated handles this case with default header values.

Trigger created
*/
type TriggersCreateCreated struct {
	Payload *models.Trigger
}

func (o *TriggersCreateCreated) Error() string {
	return fmt.Sprintf("[POST /{namespace}/triggers/][%d] triggersCreateCreated  %+v", 201, o.Payload)
}

func (o *TriggersCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Trigger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggersCreateBadRequest creates a TriggersCreateBadRequest with default headers values
func NewTriggersCreateBadRequest() *TriggersCreateBadRequest {
	return &TriggersCreateBadRequest{}
}

/*TriggersCreateBadRequest handles this case with default header values.

Invalid data supplied
*/
type TriggersCreateBadRequest struct {
	Payload TriggersCreateBadRequestBody
}

func (o *TriggersCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /{namespace}/triggers/][%d] triggersCreateBadRequest  %+v", 400, o.Payload)
}

func (o *TriggersCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TriggersCreateBadRequestBody triggers create bad request body
swagger:model TriggersCreateBadRequestBody
*/
type TriggersCreateBadRequestBody struct {

	// cause
	// Required: true
	Cause *TriggersCreateBadRequestBodyCause `json:"cause"`

	// effect
	// Required: true
	Effect *TriggersCreateBadRequestBodyEffect `json:"effect"`

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// schedule field errors
	// Required: true
	Schedule []string `json:"schedule"`

	// webhook
	// Required: true
	Webhook *TriggersCreateBadRequestBodyWebhook `json:"webhook"`
}

// Validate validates this triggers create bad request body
func (o *TriggersCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCause(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateEffect(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateWebhook(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TriggersCreateBadRequestBody) validateCause(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"cause", "body", o.Cause); err != nil {
		return err
	}

	if o.Cause != nil {

		if err := o.Cause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggersCreateBadRequest" + "." + "cause")
			}
			return err
		}
	}

	return nil
}

func (o *TriggersCreateBadRequestBody) validateEffect(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"effect", "body", o.Effect); err != nil {
		return err
	}

	if o.Effect != nil {

		if err := o.Effect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggersCreateBadRequest" + "." + "effect")
			}
			return err
		}
	}

	return nil
}

func (o *TriggersCreateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *TriggersCreateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *TriggersCreateBadRequestBody) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"schedule", "body", o.Schedule); err != nil {
		return err
	}

	return nil
}

func (o *TriggersCreateBadRequestBody) validateWebhook(formats strfmt.Registry) error {

	if err := validate.Required("triggersCreateBadRequest"+"."+"webhook", "body", o.Webhook); err != nil {
		return err
	}

	if o.Webhook != nil {

		if err := o.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggersCreateBadRequest" + "." + "webhook")
			}
			return err
		}
	}

	return nil
}

/*TriggersCreateBadRequestBodyCause triggers create bad request body cause
swagger:model TriggersCreateBadRequestBodyCause
*/
type TriggersCreateBadRequestBodyCause struct {

	// action_name field errors
	ActionName []string `json:"action_name"`

	// id field errors
	ID []string `json:"id"`

	// method field errors
	Method []string `json:"method"`

	// model field errors
	Model []string `json:"model"`

	// Errors not connected to any field
	NonFieldErrors []string `json:"non_field_errors"`

	// object_id field errors
	ObjectID []string `json:"object_id"`

	// payload field errors
	Payload []string `json:"payload"`
}

// Validate validates this triggers create bad request body cause
func (o *TriggersCreateBadRequestBodyCause) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateObjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateActionName(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionName) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.Method) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(o.Model) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validateObjectID(formats strfmt.Registry) error {

	if swag.IsZero(o.ObjectID) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyCause) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(o.Payload) { // not required
		return nil
	}

	return nil
}

/*TriggersCreateBadRequestBodyEffect triggers create bad request body effect
swagger:model TriggersCreateBadRequestBodyEffect
*/
type TriggersCreateBadRequestBodyEffect struct {

	// action_name field errors
	ActionName []string `json:"action_name"`

	// id field errors
	ID []string `json:"id"`

	// method field errors
	Method []string `json:"method"`

	// model field errors
	Model []string `json:"model"`

	// Errors not connected to any field
	NonFieldErrors []string `json:"non_field_errors"`

	// object_id field errors
	ObjectID []string `json:"object_id"`

	// payload field errors
	Payload []string `json:"payload"`
}

// Validate validates this triggers create bad request body effect
func (o *TriggersCreateBadRequestBodyEffect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateObjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateActionName(formats strfmt.Registry) error {

	if swag.IsZero(o.ActionName) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(o.Method) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(o.Model) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validateObjectID(formats strfmt.Registry) error {

	if swag.IsZero(o.ObjectID) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyEffect) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(o.Payload) { // not required
		return nil
	}

	return nil
}

/*TriggersCreateBadRequestBodyWebhook triggers create bad request body webhook
swagger:model TriggersCreateBadRequestBodyWebhook
*/
type TriggersCreateBadRequestBodyWebhook struct {

	// config field errors
	Config []string `json:"config"`

	// Errors not connected to any field
	NonFieldErrors []string `json:"non_field_errors"`

	// url field errors
	URL []string `json:"url"`
}

// Validate validates this triggers create bad request body webhook
func (o *TriggersCreateBadRequestBodyWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TriggersCreateBadRequestBodyWebhook) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.Config) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyWebhook) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (o *TriggersCreateBadRequestBodyWebhook) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(o.URL) { // not required
		return nil
	}

	return nil
}

/*TriggersCreateBody triggers create body
swagger:model TriggersCreateBody
*/
type TriggersCreateBody struct {

	// cause
	Cause *models.TriggerAction `json:"cause,omitempty"`

	// effect
	Effect *models.TriggerAction `json:"effect,omitempty"`

	// Cron schedule
	Schedule string `json:"schedule,omitempty"`

	// webhook
	Webhook *models.Webhook `json:"webhook,omitempty"`
}
