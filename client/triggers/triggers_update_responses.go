// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// TriggersUpdateReader is a Reader for the TriggersUpdate structure.
type TriggersUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggersUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTriggersUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTriggersUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTriggersUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTriggersUpdateOK creates a TriggersUpdateOK with default headers values
func NewTriggersUpdateOK() *TriggersUpdateOK {
	return &TriggersUpdateOK{}
}

/*TriggersUpdateOK handles this case with default header values.

Trigger updated
*/
type TriggersUpdateOK struct {
	Payload *models.Trigger
}

func (o *TriggersUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/triggers/{id}/][%d] triggersUpdateOK  %+v", 200, o.Payload)
}

func (o *TriggersUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Trigger)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggersUpdateBadRequest creates a TriggersUpdateBadRequest with default headers values
func NewTriggersUpdateBadRequest() *TriggersUpdateBadRequest {
	return &TriggersUpdateBadRequest{}
}

/*TriggersUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type TriggersUpdateBadRequest struct {
	Payload *models.TriggerError
}

func (o *TriggersUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/triggers/{id}/][%d] triggersUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *TriggersUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TriggerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTriggersUpdateNotFound creates a TriggersUpdateNotFound with default headers values
func NewTriggersUpdateNotFound() *TriggersUpdateNotFound {
	return &TriggersUpdateNotFound{}
}

/*TriggersUpdateNotFound handles this case with default header values.

Trigger not found
*/
type TriggersUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *TriggersUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/triggers/{id}/][%d] triggersUpdateNotFound  %+v", 404, o.Payload)
}

func (o *TriggersUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
