// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// TriggersDeleteReader is a Reader for the TriggersDelete structure.
type TriggersDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggersDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewTriggersDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewTriggersDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTriggersDeleteNoContent creates a TriggersDeleteNoContent with default headers values
func NewTriggersDeleteNoContent() *TriggersDeleteNoContent {
	return &TriggersDeleteNoContent{}
}

/*TriggersDeleteNoContent handles this case with default header values.

Trigger deleted.
*/
type TriggersDeleteNoContent struct {
}

func (o *TriggersDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/{namespace}/triggers/{id}/][%d] triggersDeleteNoContent ", 204)
}

func (o *TriggersDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTriggersDeleteNotFound creates a TriggersDeleteNotFound with default headers values
func NewTriggersDeleteNotFound() *TriggersDeleteNotFound {
	return &TriggersDeleteNotFound{}
}

/*TriggersDeleteNotFound handles this case with default header values.

Trigger not found.
*/
type TriggersDeleteNotFound struct {
	Payload *models.NotFound
}

func (o *TriggersDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/{namespace}/triggers/{id}/][%d] triggersDeleteNotFound  %+v", 404, o.Payload)
}

func (o *TriggersDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
