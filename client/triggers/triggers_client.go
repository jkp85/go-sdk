package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TriggersCreate triggers create API
*/
func (a *Client) TriggersCreate(params *TriggersCreateParams) (*TriggersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_create",
		Method:             "POST",
		PathPattern:        "/{namespace}/triggers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersCreateCreated), nil

}

/*
TriggersDelete triggers delete API
*/
func (a *Client) TriggersDelete(params *TriggersDeleteParams) (*TriggersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_delete",
		Method:             "DELETE",
		PathPattern:        "/{namespace}/triggers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersDeleteNoContent), nil

}

/*
TriggersList triggers list API
*/
func (a *Client) TriggersList(params *TriggersListParams) (*TriggersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_list",
		Method:             "GET",
		PathPattern:        "/{namespace}/triggers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersListOK), nil

}

/*
TriggersPartialUpdate triggers partial update API
*/
func (a *Client) TriggersPartialUpdate(params *TriggersPartialUpdateParams) (*TriggersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/{namespace}/triggers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersPartialUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersPartialUpdateOK), nil

}

/*
TriggersRead triggers read API
*/
func (a *Client) TriggersRead(params *TriggersReadParams) (*TriggersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_read",
		Method:             "GET",
		PathPattern:        "/{namespace}/triggers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersReadOK), nil

}

/*
TriggersUpdate triggers update API
*/
func (a *Client) TriggersUpdate(params *TriggersUpdateParams) (*TriggersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggers_update",
		Method:             "PUT",
		PathPattern:        "/{namespace}/triggers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggersUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TriggersUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
