package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/jkp85/go-sdk/models"
)

// ServersOptionsTypesCreateReader is a Reader for the ServersOptionsTypesCreate structure.
type ServersOptionsTypesCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersOptionsTypesCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewServersOptionsTypesCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewServersOptionsTypesCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServersOptionsTypesCreateCreated creates a ServersOptionsTypesCreateCreated with default headers values
func NewServersOptionsTypesCreateCreated() *ServersOptionsTypesCreateCreated {
	return &ServersOptionsTypesCreateCreated{}
}

/*ServersOptionsTypesCreateCreated handles this case with default header values.

EnvironmentType created
*/
type ServersOptionsTypesCreateCreated struct {
	Payload *models.EnvironmentType
}

func (o *ServersOptionsTypesCreateCreated) Error() string {
	return fmt.Sprintf("[POST /api/v0/{namespace}/servers/options/types/][%d] serversOptionsTypesCreateCreated  %+v", 201, o.Payload)
}

func (o *ServersOptionsTypesCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnvironmentType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersOptionsTypesCreateBadRequest creates a ServersOptionsTypesCreateBadRequest with default headers values
func NewServersOptionsTypesCreateBadRequest() *ServersOptionsTypesCreateBadRequest {
	return &ServersOptionsTypesCreateBadRequest{}
}

/*ServersOptionsTypesCreateBadRequest handles this case with default header values.

Invalid data supplied
*/
type ServersOptionsTypesCreateBadRequest struct {
	Payload ServersOptionsTypesCreateBadRequestBody
}

func (o *ServersOptionsTypesCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v0/{namespace}/servers/options/types/][%d] serversOptionsTypesCreateBadRequest  %+v", 400, o.Payload)
}

func (o *ServersOptionsTypesCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ServersOptionsTypesCreateBadRequestBody servers options types create bad request body
swagger:model ServersOptionsTypesCreateBadRequestBody
*/
type ServersOptionsTypesCreateBadRequestBody struct {

	// cmd firld errors
	// Required: true
	Cmd []string `json:"cmd"`

	// container_path firld errors
	// Required: true
	ContainerPath []string `json:"container_path"`

	// container_port firld errors
	// Required: true
	ContainerPort []string `json:"container_port"`

	// id firld errors
	// Required: true
	ID []string `json:"id"`

	// image_name firld errors
	// Required: true
	ImageName []string `json:"image_name"`

	// name firld errors
	// Required: true
	Name []string `json:"name"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// work_dir firld errors
	// Required: true
	WorkDir []string `json:"work_dir"`
}

// Validate validates this servers options types create bad request body
func (o *ServersOptionsTypesCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCmd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateContainerPath(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateContainerPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateImageName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateWorkDir(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateCmd(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"cmd", "body", o.Cmd); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateContainerPath(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"container_path", "body", o.ContainerPath); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateContainerPort(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"container_port", "body", o.ContainerPort); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateImageName(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"image_name", "body", o.ImageName); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *ServersOptionsTypesCreateBadRequestBody) validateWorkDir(formats strfmt.Registry) error {

	if err := validate.Required("serversOptionsTypesCreateBadRequest"+"."+"work_dir", "body", o.WorkDir); err != nil {
		return err
	}

	return nil
}

/*ServersOptionsTypesCreateBody servers options types create body
swagger:model ServersOptionsTypesCreateBody
*/
type ServersOptionsTypesCreateBody struct {

	// cmd
	Cmd string `json:"cmd,omitempty"`

	// container path
	ContainerPath string `json:"container_path,omitempty"`

	// container port
	ContainerPort int64 `json:"container_port,omitempty"`

	// image name
	// Required: true
	ImageName *string `json:"image_name"`

	// name
	// Required: true
	Name *string `json:"name"`

	// work dir
	WorkDir string `json:"work_dir,omitempty"`
}
