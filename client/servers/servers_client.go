// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ServersOptionsResourcesRead gets a server size by id
*/
func (a *Client) ServersOptionsResourcesRead(params *ServersOptionsResourcesReadParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsResourcesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsResourcesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_resources_read",
		Method:             "GET",
		PathPattern:        "/v1/servers/options/server-size/{size}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsResourcesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsResourcesReadOK), nil

}

/*
ServersOptionsServerSizeCreate creates a new server size item

Only super users with on-premises version have acceess to this endpoint.
*/
func (a *Client) ServersOptionsServerSizeCreate(params *ServersOptionsServerSizeCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsServerSizeCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsServerSizeCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_server_size_create",
		Method:             "POST",
		PathPattern:        "/v1/servers/options/server-size/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsServerSizeCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsServerSizeCreateCreated), nil

}

/*
ServersOptionsServerSizeDelete deletes a server size by id

Only super users with on-premises version have acceess to this endpoint.
*/
func (a *Client) ServersOptionsServerSizeDelete(params *ServersOptionsServerSizeDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsServerSizeDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsServerSizeDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_server_size_delete",
		Method:             "DELETE",
		PathPattern:        "/v1/servers/options/server-size/{size}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsServerSizeDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsServerSizeDeleteNoContent), nil

}

/*
ServersOptionsServerSizeReplace replaces a server size by id

Only super users with on-premises version have acceess to this endpoint.
*/
func (a *Client) ServersOptionsServerSizeReplace(params *ServersOptionsServerSizeReplaceParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsServerSizeReplaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsServerSizeReplaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_server_size_replace",
		Method:             "PUT",
		PathPattern:        "/v1/servers/options/server-size/{size}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsServerSizeReplaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsServerSizeReplaceOK), nil

}

/*
ServersOptionsServerSizeUpdate updates a server size by id

Only super users with on-premises version have acceess to this endpoint.
*/
func (a *Client) ServersOptionsServerSizeUpdate(params *ServersOptionsServerSizeUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsServerSizeUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsServerSizeUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_server_size_update",
		Method:             "PATCH",
		PathPattern:        "/v1/servers/options/server-size/{size}/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsServerSizeUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsServerSizeUpdateOK), nil

}

/*
ServersOptionsSizesList retrieves available server sizes
*/
func (a *Client) ServersOptionsSizesList(params *ServersOptionsSizesListParams, authInfo runtime.ClientAuthInfoWriter) (*ServersOptionsSizesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServersOptionsSizesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "servers_options_sizes_list",
		Method:             "GET",
		PathPattern:        "/v1/servers/options/server-size/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ServersOptionsSizesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ServersOptionsSizesListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
