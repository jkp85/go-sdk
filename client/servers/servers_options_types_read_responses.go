package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ServersOptionsTypesReadReader is a Reader for the ServersOptionsTypesRead structure.
type ServersOptionsTypesReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersOptionsTypesReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServersOptionsTypesReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewServersOptionsTypesReadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServersOptionsTypesReadOK creates a ServersOptionsTypesReadOK with default headers values
func NewServersOptionsTypesReadOK() *ServersOptionsTypesReadOK {
	return &ServersOptionsTypesReadOK{}
}

/*ServersOptionsTypesReadOK handles this case with default header values.

EnvironmentType retrieved
*/
type ServersOptionsTypesReadOK struct {
	Payload *models.EnvironmentType
}

func (o *ServersOptionsTypesReadOK) Error() string {
	return fmt.Sprintf("[GET /{namespace}/servers/options/types/{id}/][%d] serversOptionsTypesReadOK  %+v", 200, o.Payload)
}

func (o *ServersOptionsTypesReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnvironmentType)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersOptionsTypesReadNotFound creates a ServersOptionsTypesReadNotFound with default headers values
func NewServersOptionsTypesReadNotFound() *ServersOptionsTypesReadNotFound {
	return &ServersOptionsTypesReadNotFound{}
}

/*ServersOptionsTypesReadNotFound handles this case with default header values.

EnvironmentType not found
*/
type ServersOptionsTypesReadNotFound struct {
	Payload *models.NotFound
}

func (o *ServersOptionsTypesReadNotFound) Error() string {
	return fmt.Sprintf("[GET /{namespace}/servers/options/types/{id}/][%d] serversOptionsTypesReadNotFound  %+v", 404, o.Payload)
}

func (o *ServersOptionsTypesReadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
