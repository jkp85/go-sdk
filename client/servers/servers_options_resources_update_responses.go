// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// ServersOptionsResourcesUpdateReader is a Reader for the ServersOptionsResourcesUpdate structure.
type ServersOptionsResourcesUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServersOptionsResourcesUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServersOptionsResourcesUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewServersOptionsResourcesUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewServersOptionsResourcesUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServersOptionsResourcesUpdateOK creates a ServersOptionsResourcesUpdateOK with default headers values
func NewServersOptionsResourcesUpdateOK() *ServersOptionsResourcesUpdateOK {
	return &ServersOptionsResourcesUpdateOK{}
}

/*ServersOptionsResourcesUpdateOK handles this case with default header values.

Environment resource updated.
*/
type ServersOptionsResourcesUpdateOK struct {
	Payload *models.EnvironmentResource
}

func (o *ServersOptionsResourcesUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/servers/options/resources/{id}/][%d] serversOptionsResourcesUpdateOK  %+v", 200, o.Payload)
}

func (o *ServersOptionsResourcesUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnvironmentResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersOptionsResourcesUpdateBadRequest creates a ServersOptionsResourcesUpdateBadRequest with default headers values
func NewServersOptionsResourcesUpdateBadRequest() *ServersOptionsResourcesUpdateBadRequest {
	return &ServersOptionsResourcesUpdateBadRequest{}
}

/*ServersOptionsResourcesUpdateBadRequest handles this case with default header values.

Invalid data supplied.
*/
type ServersOptionsResourcesUpdateBadRequest struct {
	Payload *models.EnvironmentResourceError
}

func (o *ServersOptionsResourcesUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/servers/options/resources/{id}/][%d] serversOptionsResourcesUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ServersOptionsResourcesUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnvironmentResourceError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServersOptionsResourcesUpdateNotFound creates a ServersOptionsResourcesUpdateNotFound with default headers values
func NewServersOptionsResourcesUpdateNotFound() *ServersOptionsResourcesUpdateNotFound {
	return &ServersOptionsResourcesUpdateNotFound{}
}

/*ServersOptionsResourcesUpdateNotFound handles this case with default header values.

Environment resource not found.
*/
type ServersOptionsResourcesUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *ServersOptionsResourcesUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/servers/options/resources/{id}/][%d] serversOptionsResourcesUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ServersOptionsResourcesUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
