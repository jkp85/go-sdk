package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NotificationSettingsEntityUpdateReader is a Reader for the NotificationSettingsEntityUpdate structure.
type NotificationSettingsEntityUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NotificationSettingsEntityUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNotificationSettingsEntityUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNotificationSettingsEntityUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNotificationSettingsEntityUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNotificationSettingsEntityUpdateOK creates a NotificationSettingsEntityUpdateOK with default headers values
func NewNotificationSettingsEntityUpdateOK() *NotificationSettingsEntityUpdateOK {
	return &NotificationSettingsEntityUpdateOK{}
}

/*NotificationSettingsEntityUpdateOK handles this case with default header values.

Notification Settings updated
*/
type NotificationSettingsEntityUpdateOK struct {
	Payload *models.NotificationSettings
}

func (o *NotificationSettingsEntityUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationSettingsEntityUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/settings/entity/{entity}][%d] notificationSettingsEntityUpdateOK  %+v", 200, o.Payload)
}

func (o *NotificationSettingsEntityUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotificationSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationSettingsEntityUpdateBadRequest creates a NotificationSettingsEntityUpdateBadRequest with default headers values
func NewNotificationSettingsEntityUpdateBadRequest() *NotificationSettingsEntityUpdateBadRequest {
	return &NotificationSettingsEntityUpdateBadRequest{}
}

/*NotificationSettingsEntityUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type NotificationSettingsEntityUpdateBadRequest struct {
	Payload *models.NotificationSettingsError
}

func (o *NotificationSettingsEntityUpdateBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationSettingsEntityUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/settings/entity/{entity}][%d] notificationSettingsEntityUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *NotificationSettingsEntityUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotificationSettingsError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationSettingsEntityUpdateNotFound creates a NotificationSettingsEntityUpdateNotFound with default headers values
func NewNotificationSettingsEntityUpdateNotFound() *NotificationSettingsEntityUpdateNotFound {
	return &NotificationSettingsEntityUpdateNotFound{}
}

/*NotificationSettingsEntityUpdateNotFound handles this case with default header values.

Notification Settings not found.
*/
type NotificationSettingsEntityUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *NotificationSettingsEntityUpdateNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationSettingsEntityUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/settings/entity/{entity}][%d] notificationSettingsEntityUpdateNotFound  %+v", 404, o.Payload)
}

func (o *NotificationSettingsEntityUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
