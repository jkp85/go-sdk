// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewNotificationsListEntityParams creates a new NotificationsListEntityParams object
// with the default values initialized.
func NewNotificationsListEntityParams() *NotificationsListEntityParams {
	var ()
	return &NotificationsListEntityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNotificationsListEntityParamsWithTimeout creates a new NotificationsListEntityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNotificationsListEntityParamsWithTimeout(timeout time.Duration) *NotificationsListEntityParams {
	var ()
	return &NotificationsListEntityParams{

		timeout: timeout,
	}
}

// NewNotificationsListEntityParamsWithContext creates a new NotificationsListEntityParams object
// with the default values initialized, and the ability to set a context for a request
func NewNotificationsListEntityParamsWithContext(ctx context.Context) *NotificationsListEntityParams {
	var ()
	return &NotificationsListEntityParams{

		Context: ctx,
	}
}

// NewNotificationsListEntityParamsWithHTTPClient creates a new NotificationsListEntityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNotificationsListEntityParamsWithHTTPClient(client *http.Client) *NotificationsListEntityParams {
	var ()
	return &NotificationsListEntityParams{
		HTTPClient: client,
	}
}

/*NotificationsListEntityParams contains all the parameters to send to the API endpoint
for the notifications list entity operation typically these are written to a http.Request
*/
type NotificationsListEntityParams struct {

	/*Entity
	  Entity to filter notifications by.

	*/
	Entity string
	/*Limit
	  Limit when getting items.

	*/
	Limit *string
	/*Namespace
	  User or team data.

	*/
	Namespace string
	/*Offset
	  Offset when getting items.

	*/
	Offset *string
	/*Ordering
	  Ordering when getting items.

	*/
	Ordering *string
	/*Read
	  When true, get only read notifications. When false, get only unread notifications. Default behavior is to return both read and unread.

	*/
	Read *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the notifications list entity params
func (o *NotificationsListEntityParams) WithTimeout(timeout time.Duration) *NotificationsListEntityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the notifications list entity params
func (o *NotificationsListEntityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the notifications list entity params
func (o *NotificationsListEntityParams) WithContext(ctx context.Context) *NotificationsListEntityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the notifications list entity params
func (o *NotificationsListEntityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the notifications list entity params
func (o *NotificationsListEntityParams) WithHTTPClient(client *http.Client) *NotificationsListEntityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the notifications list entity params
func (o *NotificationsListEntityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntity adds the entity to the notifications list entity params
func (o *NotificationsListEntityParams) WithEntity(entity string) *NotificationsListEntityParams {
	o.SetEntity(entity)
	return o
}

// SetEntity adds the entity to the notifications list entity params
func (o *NotificationsListEntityParams) SetEntity(entity string) {
	o.Entity = entity
}

// WithLimit adds the limit to the notifications list entity params
func (o *NotificationsListEntityParams) WithLimit(limit *string) *NotificationsListEntityParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the notifications list entity params
func (o *NotificationsListEntityParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the notifications list entity params
func (o *NotificationsListEntityParams) WithNamespace(namespace string) *NotificationsListEntityParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the notifications list entity params
func (o *NotificationsListEntityParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithOffset adds the offset to the notifications list entity params
func (o *NotificationsListEntityParams) WithOffset(offset *string) *NotificationsListEntityParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the notifications list entity params
func (o *NotificationsListEntityParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrdering adds the ordering to the notifications list entity params
func (o *NotificationsListEntityParams) WithOrdering(ordering *string) *NotificationsListEntityParams {
	o.SetOrdering(ordering)
	return o
}

// SetOrdering adds the ordering to the notifications list entity params
func (o *NotificationsListEntityParams) SetOrdering(ordering *string) {
	o.Ordering = ordering
}

// WithRead adds the read to the notifications list entity params
func (o *NotificationsListEntityParams) WithRead(read *bool) *NotificationsListEntityParams {
	o.SetRead(read)
	return o
}

// SetRead adds the read to the notifications list entity params
func (o *NotificationsListEntityParams) SetRead(read *bool) {
	o.Read = read
}

// WriteToRequest writes these params to a swagger request
func (o *NotificationsListEntityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param entity
	if err := r.SetPathParam("entity", o.Entity); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Ordering != nil {

		// query param ordering
		var qrOrdering string
		if o.Ordering != nil {
			qrOrdering = *o.Ordering
		}
		qOrdering := qrOrdering
		if qOrdering != "" {
			if err := r.SetQueryParam("ordering", qOrdering); err != nil {
				return err
			}
		}

	}

	if o.Read != nil {

		// query param read
		var qrRead bool
		if o.Read != nil {
			qrRead = *o.Read
		}
		qRead := swag.FormatBool(qrRead)
		if qRead != "" {
			if err := r.SetQueryParam("read", qRead); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
