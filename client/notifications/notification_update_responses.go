package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NotificationUpdateReader is a Reader for the NotificationUpdate structure.
type NotificationUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NotificationUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNotificationUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNotificationUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNotificationUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNotificationUpdateOK creates a NotificationUpdateOK with default headers values
func NewNotificationUpdateOK() *NotificationUpdateOK {
	return &NotificationUpdateOK{}
}

/*NotificationUpdateOK handles this case with default header values.

Notification updated
*/
type NotificationUpdateOK struct {
	Payload *models.Notification
}

func (o *NotificationUpdateOK) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/{notification_id}][%d] notificationUpdateOK  %+v", 200, o.Payload)
}

func (o *NotificationUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Notification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationUpdateBadRequest creates a NotificationUpdateBadRequest with default headers values
func NewNotificationUpdateBadRequest() *NotificationUpdateBadRequest {
	return &NotificationUpdateBadRequest{}
}

/*NotificationUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type NotificationUpdateBadRequest struct {
	Payload *models.NotificationError
}

func (o *NotificationUpdateBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/{notification_id}][%d] notificationUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *NotificationUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotificationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationUpdateNotFound creates a NotificationUpdateNotFound with default headers values
func NewNotificationUpdateNotFound() *NotificationUpdateNotFound {
	return &NotificationUpdateNotFound{}
}

/*NotificationUpdateNotFound handles this case with default header values.

Notification not found.
*/
type NotificationUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *NotificationUpdateNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/notifications/{notification_id}][%d] notificationUpdateNotFound  %+v", 404, o.Payload)
}

func (o *NotificationUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
