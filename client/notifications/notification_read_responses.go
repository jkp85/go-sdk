package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IllumiDesk/go-sdk/models"
)

// NotificationReadReader is a Reader for the NotificationRead structure.
type NotificationReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NotificationReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNotificationReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewNotificationReadNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNotificationReadOK creates a NotificationReadOK with default headers values
func NewNotificationReadOK() *NotificationReadOK {
	return &NotificationReadOK{}
}

/*NotificationReadOK handles this case with default header values.

Retrieve a notification.
*/
type NotificationReadOK struct {
	Payload *models.Notification
}

func (o *NotificationReadOK) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationReadOK) Error() string {
	return fmt.Sprintf("[GET /v1/{namespace}/notifications/{notification_id}][%d] notificationReadOK  %+v", 200, o.Payload)
}

func (o *NotificationReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Notification)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNotificationReadNotFound creates a NotificationReadNotFound with default headers values
func NewNotificationReadNotFound() *NotificationReadNotFound {
	return &NotificationReadNotFound{}
}

/*NotificationReadNotFound handles this case with default header values.

Notification not found.
*/
type NotificationReadNotFound struct {
	Payload *models.NotFound
}

func (o *NotificationReadNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *NotificationReadNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/{namespace}/notifications/{notification_id}][%d] notificationReadNotFound  %+v", 404, o.Payload)
}

func (o *NotificationReadNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
