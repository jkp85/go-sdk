// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NotificationRead retrieves a specific notification
*/
func (a *Client) NotificationRead(params *NotificationReadParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationReadOK), nil

}

/*
NotificationSettingsCreate creates global notification settings
*/
func (a *Client) NotificationSettingsCreate(params *NotificationSettingsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/notifications/settings/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsCreateCreated), nil

}

/*
NotificationSettingsEntityCreate creates global notification settings
*/
func (a *Client) NotificationSettingsEntityCreate(params *NotificationSettingsEntityCreateParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsEntityCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsEntityCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_entity_create",
		Method:             "POST",
		PathPattern:        "/v1/{namespace}/notifications/settings/entity/{entity}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsEntityCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsEntityCreateCreated), nil

}

/*
NotificationSettingsEntityRead retrieves global notification settings for the authenticated user
*/
func (a *Client) NotificationSettingsEntityRead(params *NotificationSettingsEntityReadParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsEntityReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsEntityReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_entity_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/notifications/settings/entity/{entity}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsEntityReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsEntityReadOK), nil

}

/*
NotificationSettingsEntityUpdate modifies global notification settings
*/
func (a *Client) NotificationSettingsEntityUpdate(params *NotificationSettingsEntityUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsEntityUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsEntityUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_entity_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/notifications/settings/entity/{entity}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsEntityUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsEntityUpdateOK), nil

}

/*
NotificationSettingsRead retrieves global notification settings for the authenticated user
*/
func (a *Client) NotificationSettingsRead(params *NotificationSettingsReadParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_read",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/notifications/settings/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsReadOK), nil

}

/*
NotificationSettingsUpdate modifies global notification settings
*/
func (a *Client) NotificationSettingsUpdate(params *NotificationSettingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationSettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_settings_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/notifications/settings/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationSettingsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationSettingsUpdateOK), nil

}

/*
NotificationUpdate marks a specific notification as either read or unread
*/
func (a *Client) NotificationUpdate(params *NotificationUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notification_update",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationUpdateOK), nil

}

/*
NotificationsList gets notifications of all types and entities for the authenticated user
*/
func (a *Client) NotificationsList(params *NotificationsListParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notifications_list",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/notifications/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationsListOK), nil

}

/*
NotificationsListEntity gets notifications of all types and entities for the authenticated user
*/
func (a *Client) NotificationsListEntity(params *NotificationsListEntityParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationsListEntityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsListEntityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notifications_list_entity",
		Method:             "GET",
		PathPattern:        "/v1/{namespace}/notifications/entity/{entity}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsListEntityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationsListEntityOK), nil

}

/*
NotificationsUpdateEntityList marks a list of notifications as either read or unread
*/
func (a *Client) NotificationsUpdateEntityList(params *NotificationsUpdateEntityListParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationsUpdateEntityListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsUpdateEntityListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notifications_update_entity_list",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/notifications/entity/{entity}",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsUpdateEntityListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationsUpdateEntityListOK), nil

}

/*
NotificationsUpdateList marks a list of notifications as either read or unread
*/
func (a *Client) NotificationsUpdateList(params *NotificationsUpdateListParams, authInfo runtime.ClientAuthInfoWriter) (*NotificationsUpdateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNotificationsUpdateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "notifications_update_list",
		Method:             "PATCH",
		PathPattern:        "/v1/{namespace}/notifications/",
		ProducesMediaTypes: []string{"application/json", "text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NotificationsUpdateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NotificationsUpdateListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
