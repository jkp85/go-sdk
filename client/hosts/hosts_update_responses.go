// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// HostsUpdateReader is a Reader for the HostsUpdate structure.
type HostsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HostsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHostsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewHostsUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewHostsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHostsUpdateOK creates a HostsUpdateOK with default headers values
func NewHostsUpdateOK() *HostsUpdateOK {
	return &HostsUpdateOK{}
}

/*HostsUpdateOK handles this case with default header values.

DockerHost updated
*/
type HostsUpdateOK struct {
	Payload *models.DockerHost
}

func (o *HostsUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/hosts/{host}/][%d] hostsUpdateOK  %+v", 200, o.Payload)
}

func (o *HostsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DockerHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHostsUpdateBadRequest creates a HostsUpdateBadRequest with default headers values
func NewHostsUpdateBadRequest() *HostsUpdateBadRequest {
	return &HostsUpdateBadRequest{}
}

/*HostsUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type HostsUpdateBadRequest struct {
	Payload *models.DockerHostError
}

func (o *HostsUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/hosts/{host}/][%d] hostsUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *HostsUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DockerHostError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHostsUpdateNotFound creates a HostsUpdateNotFound with default headers values
func NewHostsUpdateNotFound() *HostsUpdateNotFound {
	return &HostsUpdateNotFound{}
}

/*HostsUpdateNotFound handles this case with default header values.

DockerHost not found
*/
type HostsUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *HostsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/{namespace}/hosts/{host}/][%d] hostsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *HostsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
