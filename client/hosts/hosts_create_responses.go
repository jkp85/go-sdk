package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// HostsCreateReader is a Reader for the HostsCreate structure.
type HostsCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HostsCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewHostsCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewHostsCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHostsCreateCreated creates a HostsCreateCreated with default headers values
func NewHostsCreateCreated() *HostsCreateCreated {
	return &HostsCreateCreated{}
}

/*HostsCreateCreated handles this case with default header values.

DockerHost created
*/
type HostsCreateCreated struct {
	Payload *models.DockerHost
}

func (o *HostsCreateCreated) Error() string {
	return fmt.Sprintf("[POST /{namespace}/hosts/][%d] hostsCreateCreated  %+v", 201, o.Payload)
}

func (o *HostsCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DockerHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHostsCreateBadRequest creates a HostsCreateBadRequest with default headers values
func NewHostsCreateBadRequest() *HostsCreateBadRequest {
	return &HostsCreateBadRequest{}
}

/*HostsCreateBadRequest handles this case with default header values.

Invalid data supplied
*/
type HostsCreateBadRequest struct {
	Payload HostsCreateBadRequestBody
}

func (o *HostsCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /{namespace}/hosts/][%d] hostsCreateBadRequest  %+v", 400, o.Payload)
}

func (o *HostsCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*HostsCreateBadRequestBody hosts create bad request body
swagger:model HostsCreateBadRequestBody
*/
type HostsCreateBadRequestBody struct {

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// ip field errors
	// Required: true
	IP []string `json:"ip"`

	// name field errors
	// Required: true
	Name []string `json:"name"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// port field errors
	// Required: true
	Port []string `json:"port"`

	// status field errors
	// Required: true
	Status []string `json:"status"`
}

// Validate validates this hosts create bad request body
func (o *HostsCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HostsCreateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *HostsCreateBadRequestBody) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

func (o *HostsCreateBadRequestBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *HostsCreateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *HostsCreateBadRequestBody) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

func (o *HostsCreateBadRequestBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("hostsCreateBadRequest"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

/*HostsCreateBody hosts create body
swagger:model HostsCreateBody
*/
type HostsCreateBody struct {

	// ip
	// Required: true
	IP *string `json:"ip"`

	// name
	// Required: true
	Name *string `json:"name"`

	// port
	Port int64 `json:"port,omitempty"`
}
