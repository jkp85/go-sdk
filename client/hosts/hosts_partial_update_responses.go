package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/3Blades/go-sdk/models"
)

// HostsPartialUpdateReader is a Reader for the HostsPartialUpdate structure.
type HostsPartialUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HostsPartialUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewHostsPartialUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewHostsPartialUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewHostsPartialUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewHostsPartialUpdateOK creates a HostsPartialUpdateOK with default headers values
func NewHostsPartialUpdateOK() *HostsPartialUpdateOK {
	return &HostsPartialUpdateOK{}
}

/*HostsPartialUpdateOK handles this case with default header values.

DockerHost updated
*/
type HostsPartialUpdateOK struct {
	Payload *models.DockerHost
}

func (o *HostsPartialUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/hosts/{id}/][%d] hostsPartialUpdateOK  %+v", 200, o.Payload)
}

func (o *HostsPartialUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DockerHost)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHostsPartialUpdateBadRequest creates a HostsPartialUpdateBadRequest with default headers values
func NewHostsPartialUpdateBadRequest() *HostsPartialUpdateBadRequest {
	return &HostsPartialUpdateBadRequest{}
}

/*HostsPartialUpdateBadRequest handles this case with default header values.

Invalid data supplied
*/
type HostsPartialUpdateBadRequest struct {
	Payload HostsPartialUpdateBadRequestBody
}

func (o *HostsPartialUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/hosts/{id}/][%d] hostsPartialUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *HostsPartialUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHostsPartialUpdateNotFound creates a HostsPartialUpdateNotFound with default headers values
func NewHostsPartialUpdateNotFound() *HostsPartialUpdateNotFound {
	return &HostsPartialUpdateNotFound{}
}

/*HostsPartialUpdateNotFound handles this case with default header values.

DockerHost not found
*/
type HostsPartialUpdateNotFound struct {
	Payload *models.NotFound
}

func (o *HostsPartialUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /{namespace}/hosts/{id}/][%d] hostsPartialUpdateNotFound  %+v", 404, o.Payload)
}

func (o *HostsPartialUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*HostsPartialUpdateBadRequestBody hosts partial update bad request body
swagger:model HostsPartialUpdateBadRequestBody
*/
type HostsPartialUpdateBadRequestBody struct {

	// id field errors
	// Required: true
	ID []string `json:"id"`

	// ip field errors
	// Required: true
	IP []string `json:"ip"`

	// name field errors
	// Required: true
	Name []string `json:"name"`

	// Errors not connected to any field
	// Required: true
	NonFieldErrors []string `json:"non_field_errors"`

	// port field errors
	// Required: true
	Port []string `json:"port"`

	// status field errors
	// Required: true
	Status []string `json:"status"`
}

// Validate validates this hosts partial update bad request body
func (o *HostsPartialUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateIP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validateNonFieldErrors(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"non_field_errors", "body", o.NonFieldErrors); err != nil {
		return err
	}

	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

func (o *HostsPartialUpdateBadRequestBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("hostsPartialUpdateBadRequest"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

/*HostsPartialUpdateBody hosts partial update body
swagger:model HostsPartialUpdateBody
*/
type HostsPartialUpdateBody struct {

	// ip
	IP string `json:"ip,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`
}
