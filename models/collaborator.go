// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Collaborator collaborator
// swagger:model Collaborator
type Collaborator struct {

	// Collaborator's valid email address.
	Email string `json:"email,omitempty"`

	// Collaborator's first name.
	FirstName string `json:"first_name,omitempty"`

	// Collaborator unique identifier in UUID format.
	ID string `json:"id,omitempty"`

	// Date time of when collaborator joined.
	Joined string `json:"joined,omitempty"`

	// Collaborator's last name.
	LastName string `json:"last_name,omitempty"`

	// Boolean that states whether collaborator is project owner, or not.
	//
	Owner bool `json:"owner,omitempty"`

	// Collaborator permissions. Project creators are assigned owner
	// priviledges by default. Permissions are write and read.
	//
	Permissions []string `json:"permissions"`

	// Collaborator's user name. This must be a valid user name within the
	// system.
	//
	Username string `json:"username,omitempty"`
}

// Validate validates this collaborator
func (m *Collaborator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var collaboratorPermissionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["write_project","read_project"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collaboratorPermissionsItemsEnum = append(collaboratorPermissionsItemsEnum, v)
	}
}

func (m *Collaborator) validatePermissionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, collaboratorPermissionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Collaborator) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(m.Permissions); i++ {

		// value enum
		if err := m.validatePermissionsItemsEnum("permissions"+"."+strconv.Itoa(i), "body", m.Permissions[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Collaborator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Collaborator) UnmarshalBinary(b []byte) error {
	var res Collaborator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
