package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Invoice invoice
// swagger:model Invoice
type Invoice struct {

	// amount due
	// Required: true
	AmountDue *int64 `json:"amount_due"`

	// application fee
	ApplicationFee int64 `json:"application_fee,omitempty"`

	// attempt count
	AttemptCount int64 `json:"attempt_count,omitempty"`

	// attempted
	Attempted bool `json:"attempted,omitempty"`

	// closed
	Closed bool `json:"closed,omitempty"`

	// created
	// Required: true
	Created *string `json:"created"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// customer
	// Required: true
	Customer *string `json:"customer"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// invoice date
	// Required: true
	InvoiceDate *string `json:"invoice_date"`

	// livemode
	Livemode bool `json:"livemode,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// next payment attempt
	NextPaymentAttempt string `json:"next_payment_attempt,omitempty"`

	// paid
	Paid bool `json:"paid,omitempty"`

	// period end
	// Required: true
	PeriodEnd *string `json:"period_end"`

	// period start
	// Required: true
	PeriodStart *string `json:"period_start"`

	// reciept number
	// Required: true
	RecieptNumber *string `json:"reciept_number"`

	// starting balance
	// Required: true
	StartingBalance *int64 `json:"starting_balance"`

	// statement descriptor
	StatementDescriptor string `json:"statement_descriptor,omitempty"`

	// stripe id
	// Required: true
	StripeID *string `json:"stripe_id"`

	// subscription
	Subscription string `json:"subscription,omitempty"`

	// subtotal
	// Required: true
	Subtotal *int64 `json:"subtotal"`

	// tax
	Tax int64 `json:"tax,omitempty"`

	// total
	// Required: true
	Total *int64 `json:"total"`
}

// Validate validates this invoice
func (m *Invoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountDue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodEnd(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriodStart(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRecieptNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartingBalance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStripeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubtotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Invoice) validateAmountDue(formats strfmt.Registry) error {

	if err := validate.Required("amount_due", "body", m.AmountDue); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateCustomer(formats strfmt.Registry) error {

	if err := validate.Required("customer", "body", m.Customer); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateInvoiceDate(formats strfmt.Registry) error {

	if err := validate.Required("invoice_date", "body", m.InvoiceDate); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validatePeriodEnd(formats strfmt.Registry) error {

	if err := validate.Required("period_end", "body", m.PeriodEnd); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validatePeriodStart(formats strfmt.Registry) error {

	if err := validate.Required("period_start", "body", m.PeriodStart); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateRecieptNumber(formats strfmt.Registry) error {

	if err := validate.Required("reciept_number", "body", m.RecieptNumber); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateStartingBalance(formats strfmt.Registry) error {

	if err := validate.Required("starting_balance", "body", m.StartingBalance); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateStripeID(formats strfmt.Registry) error {

	if err := validate.Required("stripe_id", "body", m.StripeID); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateSubtotal(formats strfmt.Registry) error {

	if err := validate.Required("subtotal", "body", m.Subtotal); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}
