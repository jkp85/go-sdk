package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Server server
// swagger:model Server
type Server struct {

	// config
	Config interface{} `json:"config,omitempty"`

	// connected
	Connected []string `json:"connected"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// environment resources
	EnvironmentResources string `json:"environment_resources,omitempty"`

	// host
	Host string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image name
	ImageName string `json:"image_name,omitempty"`

	// logs url
	LogsURL string `json:"logs_url,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// startup script
	StartupScript string `json:"startup_script,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnected(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) validateConnected(formats strfmt.Registry) error {

	if swag.IsZero(m.Connected) { // not required
		return nil
	}

	return nil
}

func (m *Server) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
