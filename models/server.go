// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Server server
// swagger:model Server
type Server struct {

	// Server configuration option. Values are jupyter, restful and cron.
	Config interface{} `json:"config,omitempty"`

	// Array that represents what other servers the server is connected to.
	Connected []string `json:"connected"`

	// Date and time when server was created.
	CreatedAt string `json:"created_at,omitempty"`

	// Server endpoint path.
	Endpoint string `json:"endpoint,omitempty"`

	// Value that represents user defined host, otherwise known as BYON (Bring Your Own Node).
	//
	Host string `json:"host,omitempty"`

	// Server unique identifier in UUID format.
	ID string `json:"id,omitempty"`

	// Server image source, such as 3blades/tensorflow-notebook.
	//
	ImageName string `json:"image_name,omitempty"`

	// A WebSocket URL for streaming stdout and stderr logs from the server.
	//
	LogsURL string `json:"logs_url,omitempty"`

	// Server name.
	// Required: true
	Name *string `json:"name"`

	// Server size unique identifier.
	ServerSize string `json:"server_size,omitempty"`

	// Optional startup script to use when launching server.
	StartupScript string `json:"startup_script,omitempty"`

	// Server status, such as Running or Error.
	Status string `json:"status,omitempty"`

	// A WebSocket URL for listening to server status changes.
	//
	StatusURL string `json:"status_url,omitempty"`
}

// Validate validates this server
func (m *Server) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnected(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Server) validateConnected(formats strfmt.Registry) error {

	if swag.IsZero(m.Connected) { // not required
		return nil
	}

	return nil
}

func (m *Server) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var serverTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Stopped","Running","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTypeStatusPropEnum = append(serverTypeStatusPropEnum, v)
	}
}

const (
	// ServerStatusStopped captures enum value "Stopped"
	ServerStatusStopped string = "Stopped"
	// ServerStatusRunning captures enum value "Running"
	ServerStatusRunning string = "Running"
	// ServerStatusError captures enum value "Error"
	ServerStatusError string = "Error"
)

// prop value enum
func (m *Server) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Server) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Server) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Server) UnmarshalBinary(b []byte) error {
	var res Server
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
