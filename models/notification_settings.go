// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationSettings notification settings
// swagger:model NotificationSettings
type NotificationSettings struct {

	// Email address to send notifications.
	EmailAddress string `json:"email_address,omitempty"`

	// Turn emails on or off.
	// Required: true
	EmailsEnabled *bool `json:"emails_enabled"`

	// Turn notifications on or off entirely.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The entity type that the settings pertain to.
	Entity string `json:"entity,omitempty"`

	// Notification unique identifier expressed as a UUID
	ID string `json:"id,omitempty"`

	// User the notification settings is for.
	User string `json:"user,omitempty"`
}

// Validate validates this notification settings
func (m *NotificationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailsEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationSettings) validateEmailsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("emails_enabled", "body", m.EmailsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *NotificationSettings) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var notificationSettingsTypeEntityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["global","billing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationSettingsTypeEntityPropEnum = append(notificationSettingsTypeEntityPropEnum, v)
	}
}

const (
	// NotificationSettingsEntityGlobal captures enum value "global"
	NotificationSettingsEntityGlobal string = "global"
	// NotificationSettingsEntityBilling captures enum value "billing"
	NotificationSettingsEntityBilling string = "billing"
)

// prop value enum
func (m *NotificationSettings) validateEntityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, notificationSettingsTypeEntityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NotificationSettings) validateEntity(formats strfmt.Registry) error {

	if swag.IsZero(m.Entity) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityEnum("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationSettings) UnmarshalBinary(b []byte) error {
	var res NotificationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
