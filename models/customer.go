// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
// swagger:model Customer
type Customer struct {

	// Customer account balance.
	AccountBalance int64 `json:"account_balance,omitempty"`

	// Date and time for customer creation.
	Created string `json:"created,omitempty"`

	// Currency used by customer.
	Currency string `json:"currency,omitempty"`

	// Customer default source.
	DefaultSource string `json:"default_source,omitempty"`

	// Customer unique identifier expressed as UUID.
	ID string `json:"id,omitempty"`

	// Date and time for last invoice sync.
	LastInvoiceSync string `json:"last_invoice_sync,omitempty"`

	// Customer live mode.
	Livemode bool `json:"livemode,omitempty"`

	// Optional customer meta data object.
	Metadata interface{} `json:"metadata,omitempty"`

	// Stripe identifier.
	StripeID string `json:"stripe_id,omitempty"`

	// Customer primary user.
	// Required: true
	User *string `json:"user"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
