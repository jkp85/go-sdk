// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SSHTunnelError Ssh tunnel error
// swagger:model SshTunnelError
type SSHTunnelError struct {

	// endpoint field errors.
	Endpoint []string `json:"endpoint"`

	// host field errors.
	Host []string `json:"host"`

	// id field errors.
	ID []string `json:"id"`

	// local_port field errors.
	LocalPort []string `json:"local_port"`

	// name field errors.
	Name []string `json:"name"`

	// Errors not connected to any field.
	NonFieldErrors []string `json:"non_field_errors"`

	// remote_port field errors.
	RemotePort []string `json:"remote_port"`

	// username field errors.
	Username []string `json:"username"`
}

// Validate validates this Ssh tunnel error
func (m *SSHTunnelError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocalPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRemotePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHTunnelError) validateEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateHost(formats strfmt.Registry) error {

	if swag.IsZero(m.Host) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateLocalPort(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalPort) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateRemotePort(formats strfmt.Registry) error {

	if swag.IsZero(m.RemotePort) { // not required
		return nil
	}

	return nil
}

func (m *SSHTunnelError) validateUsername(formats strfmt.Registry) error {

	if swag.IsZero(m.Username) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SSHTunnelError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHTunnelError) UnmarshalBinary(b []byte) error {
	var res SSHTunnelError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
