// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ProjectFileError project file error
// swagger:model ProjectFileError
type ProjectFileError struct {

	// base64_data field errors
	Base64Data []string `json:"base64_data"`

	// file field errors
	File []string `json:"file"`

	// id field errors
	ID []string `json:"id"`

	// name field errors
	Name []string `json:"name"`

	// Errors not connected to any field
	NonFieldErrors []string `json:"non_field_errors"`

	// project field errors
	Project []string `json:"project"`

	// public field errors
	Public []string `json:"public"`
}

// Validate validates this project file error
func (m *ProjectFileError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBase64Data(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublic(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectFileError) validateBase64Data(formats strfmt.Registry) error {

	if swag.IsZero(m.Base64Data) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	return nil
}

func (m *ProjectFileError) validatePublic(formats strfmt.Registry) error {

	if swag.IsZero(m.Public) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectFileError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectFileError) UnmarshalBinary(b []byte) error {
	var res ProjectFileError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
