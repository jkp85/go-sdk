// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
// swagger:model Subscription
type Subscription struct {

	// Application fee percent.
	ApplicationFeePercent float64 `json:"application_fee_percent,omitempty"`

	// Boolean value to determine whether plan cancels at the end of the period, or not.
	CancelAtPeriodEnd bool `json:"cancel_at_period_end,omitempty"`

	// Date and time when plan was cancelled.
	CanceledAt string `json:"canceled_at,omitempty"`

	// Date and time suscription was created.
	Created string `json:"created,omitempty"`

	// Current suscription plan end date.
	CurrentPeriodEnd string `json:"current_period_end,omitempty"`

	// Current suscription plan start date.
	CurrentPeriodStart string `json:"current_period_start,omitempty"`

	// Date and time for when plan ended.
	EndedAt string `json:"ended_at,omitempty"`

	// Unique identifier for suscription as UUID.
	ID string `json:"id,omitempty"`

	// Suscription live, or not.
	Livemode bool `json:"livemode,omitempty"`

	// Plan name.
	// Required: true
	Plan *string `json:"plan"`

	// Quantity purchased as integer.
	Quantity int64 `json:"quantity,omitempty"`

	// Date and time for when plan started.
	Start string `json:"start,omitempty"`

	// Suscription status.
	Status string `json:"status,omitempty"`

	// Stripe (payment processor) identifier.
	StripeID string `json:"stripe_id,omitempty"`

	// Date and time for trial end.
	TrialEnd string `json:"trial_end,omitempty"`

	// Date and time for trial start.
	TrialStart string `json:"trial_start,omitempty"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlan(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscription) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("plan", "body", m.Plan); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
