// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerActionData server action data
// swagger:model ServerActionData
type ServerActionData struct {

	// Name of server action.
	Name string `json:"name,omitempty"`

	// Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. Stopping a server changes state from Running to Stopped. If the action results in Error, status will change to Error.
	//
	Operation string `json:"operation,omitempty"`

	// webhook
	Webhook *Webhook `json:"webhook,omitempty"`
}

// Validate validates this server action data
func (m *ServerActionData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWebhook(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverActionDataTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop","terminate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverActionDataTypeOperationPropEnum = append(serverActionDataTypeOperationPropEnum, v)
	}
}

const (
	// ServerActionDataOperationStart captures enum value "start"
	ServerActionDataOperationStart string = "start"
	// ServerActionDataOperationStop captures enum value "stop"
	ServerActionDataOperationStop string = "stop"
	// ServerActionDataOperationTerminate captures enum value "terminate"
	ServerActionDataOperationTerminate string = "terminate"
)

// prop value enum
func (m *ServerActionData) validateOperationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverActionDataTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerActionData) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *ServerActionData) validateWebhook(formats strfmt.Registry) error {

	if swag.IsZero(m.Webhook) { // not required
		return nil
	}

	if m.Webhook != nil {

		if err := m.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerActionData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerActionData) UnmarshalBinary(b []byte) error {
	var res ServerActionData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
