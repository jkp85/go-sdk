// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Card card
// swagger:model Card
type Card struct {

	// Address city.
	AddressCity string `json:"address_city,omitempty"`

	// Address country.
	AddressCountry string `json:"address_country,omitempty"`

	// Address line 1.
	AddressLine1 string `json:"address_line1,omitempty"`

	// Address line 1 check, when processing card.
	AddressLine1Check string `json:"address_line1_check,omitempty"`

	// Address line 2.
	AddressLine2 string `json:"address_line2,omitempty"`

	// Address state.
	AddressState string `json:"address_state,omitempty"`

	// Address zip code.
	AddressZip string `json:"address_zip,omitempty"`

	// Address check, when processing card.
	AddressZipCheck string `json:"address_zip_check,omitempty"`

	// Credit or debit card brand.
	Brand string `json:"brand,omitempty"`

	// Card date and time creation.
	Created string `json:"created,omitempty"`

	// Card customer.
	Customer string `json:"customer,omitempty"`

	// Security code check.
	CvcCheck string `json:"cvc_check,omitempty"`

	// Card expiration month.
	ExpMonth int64 `json:"exp_month,omitempty"`

	// Card expiration year.
	ExpYear int64 `json:"exp_year,omitempty"`

	// Card fingerprint.
	Fingerprint string `json:"fingerprint,omitempty"`

	// Funding.
	Funding string `json:"funding,omitempty"`

	// Card unique identifier, expressed as UUID.
	ID string `json:"id,omitempty"`

	// Last four digits of credit or debit card.
	Last4 string `json:"last4,omitempty"`

	// Card name.
	Name string `json:"name,omitempty"`

	// Unique stripe identifier.
	StripeID string `json:"stripe_id,omitempty"`

	// Card unique token.
	Token string `json:"token,omitempty"`
}

// Validate validates this card
func (m *Card) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Card) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Card) UnmarshalBinary(b []byte) error {
	var res Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
