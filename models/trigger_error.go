// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TriggerError trigger error
// swagger:model TriggerError
type TriggerError struct {

	// cause
	Cause *TriggerErrorCause `json:"cause,omitempty"`

	// effect
	Effect *TriggerErrorEffect `json:"effect,omitempty"`

	// Id field errors.
	ID []string `json:"id"`

	// Errors not connected to any field.'
	NonFieldErrors []string `json:"non_field_errors"`

	// schedule field errors
	Schedule []string `json:"schedule"`

	// webhook
	Webhook *TriggerErrorWebhook `json:"webhook,omitempty"`
}

// Validate validates this trigger error
func (m *TriggerError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCause(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEffect(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWebhook(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerError) validateCause(formats strfmt.Registry) error {

	if swag.IsZero(m.Cause) { // not required
		return nil
	}

	if m.Cause != nil {

		if err := m.Cause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cause")
			}
			return err
		}
	}

	return nil
}

func (m *TriggerError) validateEffect(formats strfmt.Registry) error {

	if swag.IsZero(m.Effect) { // not required
		return nil
	}

	if m.Effect != nil {

		if err := m.Effect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("effect")
			}
			return err
		}
	}

	return nil
}

func (m *TriggerError) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *TriggerError) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *TriggerError) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	return nil
}

func (m *TriggerError) validateWebhook(formats strfmt.Registry) error {

	if swag.IsZero(m.Webhook) { // not required
		return nil
	}

	if m.Webhook != nil {

		if err := m.Webhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("webhook")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerError) UnmarshalBinary(b []byte) error {
	var res TriggerError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TriggerErrorCause trigger error cause
// swagger:model TriggerErrorCause
type TriggerErrorCause struct {

	// Action_name field errors.
	ActionName []string `json:"action_name"`

	// Id field errors.
	ID []string `json:"id"`

	// Method field errors.
	Method []string `json:"method"`

	// Model field errors.
	Model []string `json:"model"`

	// Errors not connected to any field.
	NonFieldErrors []string `json:"non_field_errors"`

	// Object_id field errors.
	ObjectID []string `json:"object_id"`

	// Payload field errors.
	Payload []string `json:"payload"`
}

// Validate validates this trigger error cause
func (m *TriggerErrorCause) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerErrorCause) validateActionName(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionName) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validateObjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectID) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorCause) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerErrorCause) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerErrorCause) UnmarshalBinary(b []byte) error {
	var res TriggerErrorCause
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TriggerErrorEffect trigger error effect
// swagger:model TriggerErrorEffect
type TriggerErrorEffect struct {

	// Action_name field errors.
	ActionName []string `json:"action_name"`

	// Id field errors.
	ID []string `json:"id"`

	// Method field errors.
	Method []string `json:"method"`

	// Model field errors.
	Model []string `json:"model"`

	// Errors not connected to any field.
	NonFieldErrors []string `json:"non_field_errors"`

	// Object_id field errors.
	ObjectID []string `json:"object_id"`

	// Payload field errors.
	Payload []string `json:"payload"`
}

// Validate validates this trigger error effect
func (m *TriggerErrorEffect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerErrorEffect) validateActionName(formats strfmt.Registry) error {

	if swag.IsZero(m.ActionName) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validateMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.Method) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validateModel(formats strfmt.Registry) error {

	if swag.IsZero(m.Model) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validateObjectID(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectID) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorEffect) validatePayload(formats strfmt.Registry) error {

	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerErrorEffect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerErrorEffect) UnmarshalBinary(b []byte) error {
	var res TriggerErrorEffect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TriggerErrorWebhook trigger error webhook
// swagger:model TriggerErrorWebhook
type TriggerErrorWebhook struct {

	// config field errors
	Config []string `json:"config"`

	// Errors not connected to any field
	NonFieldErrors []string `json:"non_field_errors"`

	// url field errors
	URL []string `json:"url"`
}

// Validate validates this trigger error webhook
func (m *TriggerErrorWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNonFieldErrors(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TriggerErrorWebhook) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorWebhook) validateNonFieldErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.NonFieldErrors) { // not required
		return nil
	}

	return nil
}

func (m *TriggerErrorWebhook) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TriggerErrorWebhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TriggerErrorWebhook) UnmarshalBinary(b []byte) error {
	var res TriggerErrorWebhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
