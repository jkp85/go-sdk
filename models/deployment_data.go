// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentData deployment data
// swagger:model DeploymentData
type DeploymentData struct {

	// Deployment configuration for included files and handler.
	// Required: true
	Config *DeploymentConfig `json:"config"`

	// Framework that the deployment will have access to.
	// Required: true
	Framework *string `json:"framework"`

	// Deployment name.
	// Required: true
	Name *string `json:"name"`

	// Language runtime the deployment will use.
	// Required: true
	Runtime *string `json:"runtime"`
}

// Validate validates this deployment data
func (m *DeploymentData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentData) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

var deploymentDataTypeFrameworkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tensorflow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentDataTypeFrameworkPropEnum = append(deploymentDataTypeFrameworkPropEnum, v)
	}
}

const (
	// DeploymentDataFrameworkTensorflow captures enum value "tensorflow"
	DeploymentDataFrameworkTensorflow string = "tensorflow"
)

// prop value enum
func (m *DeploymentData) validateFrameworkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentDataTypeFrameworkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentData) validateFramework(formats strfmt.Registry) error {

	if err := validate.Required("framework", "body", m.Framework); err != nil {
		return err
	}

	// value enum
	if err := m.validateFrameworkEnum("framework", "body", *m.Framework); err != nil {
		return err
	}

	return nil
}

func (m *DeploymentData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var deploymentDataTypeRuntimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["python2.7"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentDataTypeRuntimePropEnum = append(deploymentDataTypeRuntimePropEnum, v)
	}
}

const (
	// DeploymentDataRuntimePython27 captures enum value "python2.7"
	DeploymentDataRuntimePython27 string = "python2.7"
)

// prop value enum
func (m *DeploymentData) validateRuntimeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentDataTypeRuntimePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentData) validateRuntime(formats strfmt.Registry) error {

	if err := validate.Required("runtime", "body", m.Runtime); err != nil {
		return err
	}

	// value enum
	if err := m.validateRuntimeEnum("runtime", "body", *m.Runtime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentData) UnmarshalBinary(b []byte) error {
	var res DeploymentData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
