// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerAction server action
// swagger:model ServerAction
type ServerAction struct {

	// Server action unique identifier.
	ID string `json:"id,omitempty"`

	// Name for server action.
	Name string `json:"name,omitempty"`

	// 'Manage server state. Starting a server changes state from Starting to
	// Running. Terminating a server changes state from Running to Terminated.
	// If the action results in Error, status will change to Error.'
	//
	Operation string `json:"operation,omitempty"`
}

// Validate validates this server action
func (m *ServerAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverActionTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","terminate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverActionTypeOperationPropEnum = append(serverActionTypeOperationPropEnum, v)
	}
}

const (
	// ServerActionOperationStart captures enum value "start"
	ServerActionOperationStart string = "start"
	// ServerActionOperationTerminate captures enum value "terminate"
	ServerActionOperationTerminate string = "terminate"
)

// prop value enum
func (m *ServerAction) validateOperationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serverActionTypeOperationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServerAction) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerAction) UnmarshalBinary(b []byte) error {
	var res ServerAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
