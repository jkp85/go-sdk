package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// EnvironmentType environment type
// swagger:model EnvironmentType
type EnvironmentType struct {

	// cmd
	Cmd string `json:"cmd,omitempty"`

	// container path
	ContainerPath string `json:"container_path,omitempty"`

	// container port
	ContainerPort int64 `json:"container_port,omitempty"`

	// image name
	// Required: true
	ImageName *string `json:"image_name"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`

	// work dir
	WorkDir string `json:"work_dir,omitempty"`
}

// Validate validates this environment type
func (m *EnvironmentType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentType) validateImageName(formats strfmt.Registry) error {

	if err := validate.Required("image_name", "body", m.ImageName); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentType) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
