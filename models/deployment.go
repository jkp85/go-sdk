// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Deployment deployment
// swagger:model Deployment
type Deployment struct {

	// TODO
	Config *DeploymentConfig `json:"config,omitempty"`

	// Date and time when server was created.
	CreatedAt string `json:"created_at,omitempty"`

	// User that created server.
	CreatedBy string `json:"created_by,omitempty"`

	// Framework that the deployment will have access to.
	Framework string `json:"framework,omitempty"`

	// Deploymeny unique identifier
	ID string `json:"id,omitempty"`

	// Deployment name.
	Name string `json:"name,omitempty"`

	// Project name.
	Project string `json:"project,omitempty"`

	// Language runtime the deployment will use.
	Runtime string `json:"runtime,omitempty"`
}

// Validate validates this deployment
func (m *Deployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFramework(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Deployment) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

var deploymentTypeFrameworkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tensorflow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeFrameworkPropEnum = append(deploymentTypeFrameworkPropEnum, v)
	}
}

const (
	// DeploymentFrameworkTensorflow captures enum value "tensorflow"
	DeploymentFrameworkTensorflow string = "tensorflow"
)

// prop value enum
func (m *Deployment) validateFrameworkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentTypeFrameworkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateFramework(formats strfmt.Registry) error {

	if swag.IsZero(m.Framework) { // not required
		return nil
	}

	// value enum
	if err := m.validateFrameworkEnum("framework", "body", m.Framework); err != nil {
		return err
	}

	return nil
}

var deploymentTypeRuntimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["python2.7"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentTypeRuntimePropEnum = append(deploymentTypeRuntimePropEnum, v)
	}
}

const (
	// DeploymentRuntimePython27 captures enum value "python2.7"
	DeploymentRuntimePython27 string = "python2.7"
)

// prop value enum
func (m *Deployment) validateRuntimeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentTypeRuntimePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Deployment) validateRuntime(formats strfmt.Registry) error {

	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuntimeEnum("runtime", "body", m.Runtime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Deployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Deployment) UnmarshalBinary(b []byte) error {
	var res Deployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
