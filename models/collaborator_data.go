// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CollaboratorData collaborator data
// swagger:model CollaboratorData
type CollaboratorData struct {

	// Project member.
	// Required: true
	Member *string `json:"member"`

	// Project owner.
	Owner bool `json:"owner,omitempty"`

	// Permissions assigned to collaborator.
	// Required: true
	Permissions []string `json:"permissions"`
}

// Validate validates this collaborator data
func (m *CollaboratorData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMember(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollaboratorData) validateMember(formats strfmt.Registry) error {

	if err := validate.Required("member", "body", m.Member); err != nil {
		return err
	}

	return nil
}

func (m *CollaboratorData) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollaboratorData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollaboratorData) UnmarshalBinary(b []byte) error {
	var res CollaboratorData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
