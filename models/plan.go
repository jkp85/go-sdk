package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Plan plan
// swagger:model Plan
type Plan struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// created
	Created string `json:"created,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interval
	// Required: true
	Interval *string `json:"interval"`

	// interval count
	// Required: true
	IntervalCount *int64 `json:"interval_count"`

	// livemode
	Livemode bool `json:"livemode,omitempty"`

	// metadata
	Metadata interface{} `json:"metadata,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// statement descriptor
	StatementDescriptor string `json:"statement_descriptor,omitempty"`

	// stripe id
	StripeID string `json:"stripe_id,omitempty"`

	// trial period days
	TrialPeriodDays int64 `json:"trial_period_days,omitempty"`
}

// Validate validates this plan
func (m *Plan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIntervalCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Plan) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateIntervalCount(formats strfmt.Registry) error {

	if err := validate.Required("interval_count", "body", m.IntervalCount); err != nil {
		return err
	}

	return nil
}

func (m *Plan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}
