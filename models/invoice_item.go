// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceItem invoice item
// swagger:model InvoiceItem
type InvoiceItem struct {

	// Amount the the invoice item will be billed for.
	// Required: true
	Amount *int64 `json:"amount"`

	// Date and time when invoice was created.
	// Required: true
	Created *string `json:"created"`

	// Currency used in invoice.
	// Required: true
	Currency *string `json:"currency"`

	// Item description.
	Description string `json:"description,omitempty"`

	// InvoiceItem unique identifier expressed as UUID.
	ID string `json:"id,omitempty"`

	// Invoice unique identifier expressed as UUID.
	// Required: true
	Invoice *string `json:"invoice"`

	// Date the item was added to the invoice.
	// Required: true
	InvoiceDate *string `json:"invoice_date"`

	// Boolean that determines whether invoice is live, or not.
	Livemode bool `json:"livemode,omitempty"`

	// Optional metadata object of invoice.
	Metadata interface{} `json:"metadata,omitempty"`

	// Whether or not the items cost will be prorated for the billing period.
	Proration bool `json:"proration,omitempty"`

	// Number of units for this item.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// Stripe account identifier.
	// Required: true
	StripeID *string `json:"stripe_id"`
}

// Validate validates this invoice item
func (m *InvoiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStripeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceItem) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateInvoice(formats strfmt.Registry) error {

	if err := validate.Required("invoice", "body", m.Invoice); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateInvoiceDate(formats strfmt.Registry) error {

	if err := validate.Required("invoice_date", "body", m.InvoiceDate); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateStripeID(formats strfmt.Registry) error {

	if err := validate.Required("stripe_id", "body", m.StripeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceItem) UnmarshalBinary(b []byte) error {
	var res InvoiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
