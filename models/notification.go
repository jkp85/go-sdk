// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notification notification
// swagger:model Notification
type Notification struct {

	// Unique identifier of the object that triggered the notification.
	Actor string `json:"actor,omitempty"`

	// Notification unique identifier expressed as a UUID
	ID string `json:"id,omitempty"`

	// Whether or not the notification has been marked as read by the user.
	// Required: true
	Read *bool `json:"read"`

	// Unique identifier of the object that was acted upon by the object referred to in actor.
	Target string `json:"target,omitempty"`

	// Timestamp that the notification was created at.
	Timestamp string `json:"timestamp,omitempty"`

	// Type of the notification, e.g. invoice.created, subscription.created, etc.
	Type string `json:"type,omitempty"`

	// User the notification is for.
	User string `json:"user,omitempty"`
}

// Validate validates this notification
func (m *Notification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRead(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notification) validateRead(formats strfmt.Registry) error {

	if err := validate.Required("read", "body", m.Read); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Notification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notification) UnmarshalBinary(b []byte) error {
	var res Notification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
