// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Action action
// swagger:model Action
type Action struct {

	// Action name.
	// Required: true
	Action *string `json:"action"`

	// Action name.
	ActionName string `json:"action_name,omitempty"`

	// Can action be cancelled, or not.
	CanBeCancelled bool `json:"can_be_cancelled,omitempty"`

	// May action be retried, or not.
	CanBeRetried bool `json:"can_be_retried,omitempty"`

	// Action needs to end before a certain date and time.
	EndDate string `json:"end_date,omitempty"`

	// Action unique identifier, expressed as UUID.
	ID string `json:"id,omitempty"`

	// IP address that action is related to.
	IP string `json:"ip,omitempty"`

	// Is the action related to a user, or not.
	IsUserAction bool `json:"is_user_action,omitempty"`

	// Action method.
	// Required: true
	Method *string `json:"method"`

	// Action object.
	Object string `json:"object,omitempty"`

	// Action path.
	Path string `json:"path,omitempty"`

	// Object action payload.
	Payload interface{} `json:"payload,omitempty"`

	// Resource URI.
	ResourceURI string `json:"resource_uri,omitempty"`

	// Action date and time start.
	StartDate string `json:"start_date,omitempty"`

	// Action state.
	// Required: true
	State *string `json:"state"`

	// User that action is assigned to.
	User string `json:"user,omitempty"`

	// User agent that action is related to.
	// Required: true
	UserAgent *string `json:"user_agent"`
}

// Validate validates this action
func (m *Action) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Action) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *Action) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *Action) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Action) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("user_agent", "body", m.UserAgent); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Action) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Action) UnmarshalBinary(b []byte) error {
	var res Action
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
